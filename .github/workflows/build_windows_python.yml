name: Windows Python

on:
  workflow_call:

jobs:
  python:
    strategy:
      fail-fast: false
      matrix:
        include:
        - { os: "windows-2022", python-version: "3.9" }
        - { os: "windows-2022", python-version: "3.10" }
        - { os: "windows-2022", python-version: "3.11" }
        - { os: "windows-2022", python-version: "3.12" }
        - { os: "windows-2022", python-version: "3.13" }

    runs-on: ${{matrix.os}}
    name: ${{matrix.os}}-python${{matrix.python-version}}

    steps:
    - name: "Set up environment"
      shell: bash
      run: |
        echo "PYLINT_ENABLED=1" >> ${GITHUB_ENV}
        echo "MYPY_ENABLED=1" >> ${GITHUB_ENV}
        # python wants v141
        echo "MSVC_CMAKE_GENERATOR=Visual Studio 17 2022" >> ${GITHUB_ENV}
        echo "MSVC_CMAKE_TOOLSET=v141" >> ${GITHUB_ENV}
        echo "CMAKE_BUILD_PARALLEL_LEVEL=8" >> ${GITHUB_ENV}
        echo "Running vs_installer.exe..."
        time "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe" modify --add Microsoft.VisualStudio.Component.VC.v141.x86.x64 --nocache --passive --norestart --installPath "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        # extra logging to debug rare VS installation not found error
        echo "ls VC/Auxiliary/Build"
        ls "/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build"
        echo "ls VC/Tools/MSVC"
        ls "/c/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC"
        echo "find /c/Program Files/Microsoft Visual Studio/2022/Enterprise -name v141"
        find "/c/Program Files/Microsoft Visual Studio/2022/Enterprise" -name v141
        echo "req query HKLM/.../VisualStudio/Setup"
        reg query "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\Setup"

    - name: Install dependencies
      shell: bash
      run: |
        choco install doxygen.portable
        choco install graphviz
        choco install wget
        choco install zip --version=3.0.0.20251001

    - name: Set up Java 8
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: "8"

    - name: Set up Python ${{matrix.python-version}}
      uses: actions/setup-python@v4
      with:
        python-version: ${{matrix.python-version}}

    - name: Install Python dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install virtualenv
        python -m pip install setuptools # necessary for pkg_resources on Python 3.12

    - name: "Convert environment variables to POSIX paths"
      shell: bash
      run: |
        echo "ANT=/${ANT_HOME}/bin/ant" | sed -e 's/\\/\//g' -e 's/://' >> ${GITHUB_ENV}
        echo "JAVA_HOME=/${JAVA_HOME}" | sed -e 's/\\/\//g' -e 's/://' >> ${GITHUB_ENV}

    - name: "Checkout"
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download Zserio release artifact
      uses: actions/download-artifact@v4
      with:
        name: zserio-bin-java8

    - name: Build Zserio C++ runtime (needed for python_cpp)
      shell: bash
      run: |
        scripts/build.sh cpp_rt-windows64-msvc

    - name: Build Zserio Python runtime
      shell: bash
      run: |
        scripts/build.sh python_rt

    - name: Pack Zserio Python runtime release
      shell: bash
      run: |
        scripts/release.sh -p runtime_libs

    - name: Run Zserio tests
      shell: bash
      run: |
        scripts/test.sh python

    - name: Run Zserio tests with extra arguments
      shell: bash
      run: |
        export ZSERIO_EXTRA_ARGS="-withTypeInfoCode -withCodeComments"
        scripts/test.sh -p -i arguments/without_writer_code python

        export ZSERIO_EXTRA_ARGS="${ZSERIO_EXTRA_ARGS} -withValidationCode -withRangeCheckCode"
        scripts/test.sh -p -x arguments/without_writer_code python

    - name: Run Zserio integration tests for repeated generation
      shell: bash
      run: |
        scripts/test_gen.sh python

    - name: Run Zserio API compatibility checks
      shell: bash
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        MYPY_ENABLED: 0
        PYLINT_ENABLED: 0
      run: |
        scripts/test_compat_api.sh python

    - name: Run Zserio performance tests
      shell: bash
      run: |
        scripts/test_perf.sh python python-cpp \
            --source-dir test/data/others/gif/zs --source gif.zs \
            --blob-name gif.GifFile --blob-file test/data/others/gif/data/1pix.gif \
            --num-iterations 1000 --test-config READ_WRITE

    - name: Run Zserio benchmarks
      shell: bash
      run: |
        scripts/benchmark.sh python python-cpp --num-iterations 1

    - name: Archive Zserio Python runtime artifacts
      uses: actions/upload-artifact@v4
      # we want this artifact only once since it contains only sources
      if: ${{ matrix.python-version == '3.9' }}
      with:
        name: "zserio-runtime-python"
        path: release-*/*runtime-libs*

    - name: Archive Zserio build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "zserio-build-${{matrix.os}}-python${{matrix.python-version}}"
        path: |
          build/runtime_libs/python/**/zserio_cpp/**/*.pyd

