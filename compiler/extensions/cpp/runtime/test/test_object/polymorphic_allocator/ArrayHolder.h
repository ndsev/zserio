/**
 * Automatically generated by Zserio C++ generator version 1.0.2 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, polymorphicAllocator.
 */

#ifndef TEST_OBJECT_POLYMORPHIC_ALLOCATOR_ARRAY_HOLDER_H
#define TEST_OBJECT_POLYMORPHIC_ALLOCATOR_ARRAY_HOLDER_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/pmr/ITypeInfo.h>
#include <zserio/pmr/IReflectable.h>
#include <zserio/pmr/PolymorphicAllocator.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/pmr/Vector.h>

#include <test_object/polymorphic_allocator/ArrayBitmask.h>
#include <test_object/polymorphic_allocator/ArrayEnum.h>
#include <test_object/polymorphic_allocator/ArrayObject.h>
#include <test_object/polymorphic_allocator/ArrayParamObject.h>

namespace test_object
{
namespace polymorphic_allocator
{

class ArrayHolder
{
public:
    using allocator_type = ::zserio::pmr::PropagatingPolymorphicAllocator<>;

    ArrayHolder() noexcept :
            ArrayHolder(allocator_type())
    {}

    explicit ArrayHolder(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_enumArray = ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayEnum>,
            typename ZSERIO_T_bitmaskArray = ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayBitmask>,
            typename ZSERIO_T_packedArray = ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>,
            typename ZSERIO_T_packedParamArray = ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_enumArray, ArrayHolder, allocator_type> = 0>
    ArrayHolder(
            ZSERIO_T_enumArray&& enumArray_,
            ZSERIO_T_bitmaskArray&& bitmaskArray_,
            ZSERIO_T_packedArray&& packedArray_,
            ZSERIO_T_packedParamArray&& packedParamArray_,
            const allocator_type& allocator = allocator_type()) :
            ArrayHolder(allocator)
    {
        m_enumArray_ = ZserioArrayType_enumArray(::std::forward<ZSERIO_T_enumArray>(enumArray_));
        m_bitmaskArray_ = ZserioArrayType_bitmaskArray(::std::forward<ZSERIO_T_bitmaskArray>(bitmaskArray_));
        m_packedArray_ = ZserioArrayType_packedArray(::std::forward<ZSERIO_T_packedArray>(packedArray_));
        m_packedParamArray_ = ZserioArrayType_packedParamArray(::std::forward<ZSERIO_T_packedParamArray>(packedParamArray_));
    }

    explicit ArrayHolder(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~ArrayHolder() = default;

    ArrayHolder(const ArrayHolder& other);
    ArrayHolder& operator=(const ArrayHolder& other);

    ArrayHolder(ArrayHolder&& other);
    ArrayHolder& operator=(ArrayHolder&& other);

    ArrayHolder(::zserio::PropagateAllocatorT,
            const ArrayHolder& other, const allocator_type& allocator);

    static const ::zserio::pmr::ITypeInfo& typeInfo();
    ::zserio::pmr::IReflectableConstPtr reflectable(const allocator_type& allocator = allocator_type()) const;
    ::zserio::pmr::IReflectablePtr reflectable(const allocator_type& allocator = allocator_type());

    void initializeChildren();

    const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayEnum>& getEnumArray() const;
    ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayEnum>& getEnumArray();
    void setEnumArray(const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayEnum>& enumArray_);
    void setEnumArray(::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayEnum>&& enumArray_);

    const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayBitmask>& getBitmaskArray() const;
    ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayBitmask>& getBitmaskArray();
    void setBitmaskArray(const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayBitmask>& bitmaskArray_);
    void setBitmaskArray(::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayBitmask>&& bitmaskArray_);

    const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>& getPackedArray() const;
    ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>& getPackedArray();
    void setPackedArray(const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>& packedArray_);
    void setPackedArray(::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>&& packedArray_);

    const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>& getPackedParamArray() const;
    ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>& getPackedParamArray();
    void setPackedParamArray(const ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>& packedParamArray_);
    void setPackedParamArray(::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>&& packedParamArray_);

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const ArrayHolder& other) const;

    bool operator<(const ArrayHolder& other) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    class ZserioElementFactory_packedArray
    {
    public:
        using OwnerType = ArrayHolder;

        static void create(ArrayHolder& owner,
                ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ArrayHolder& owner,
                ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>& array,
                ::test_object::polymorphic_allocator::ArrayObject::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    class ZserioArrayExpressions_packedParamArray
    {
    public:
        using OwnerType = ArrayHolder;

        static void initializeElement(ArrayHolder& owner,
                ::test_object::polymorphic_allocator::ArrayParamObject& element, size_t index);
    };

    class ZserioElementFactory_packedParamArray
    {
    public:
        using OwnerType = ArrayHolder;

        static void create(ArrayHolder& owner,
                ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>& array,
                ::zserio::BitStreamReader& in, size_t index);

        static void create(ArrayHolder& owner,
                ::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>& array,
                ::test_object::polymorphic_allocator::ArrayParamObject::ZserioPackingContext& context,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_enumArray = ::zserio::Array<::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayEnum>, ::zserio::EnumArrayTraits<::test_object::polymorphic_allocator::ArrayEnum>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_bitmaskArray = ::zserio::Array<::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayBitmask>, ::zserio::BitmaskArrayTraits<::test_object::polymorphic_allocator::ArrayBitmask>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_packedArray = ::zserio::Array<::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayObject>, ::zserio::ObjectArrayTraits<::test_object::polymorphic_allocator::ArrayObject, ZserioElementFactory_packedArray>, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_packedParamArray = ::zserio::Array<::zserio::pmr::vector<::test_object::polymorphic_allocator::ArrayParamObject>, ::zserio::ObjectArrayTraits<::test_object::polymorphic_allocator::ArrayParamObject, ZserioElementFactory_packedParamArray>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_packedParamArray>;

    ZserioArrayType_enumArray readEnumArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_bitmaskArray readBitmaskArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_packedArray readPackedArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_packedParamArray readPackedParamArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    bool m_areChildrenInitialized;
    ZserioArrayType_enumArray m_enumArray_;
    ZserioArrayType_bitmaskArray m_bitmaskArray_;
    ZserioArrayType_packedArray m_packedArray_;
    ZserioArrayType_packedParamArray m_packedParamArray_;
};

} // namespace polymorphic_allocator
} // namespace test_object

#endif // TEST_OBJECT_POLYMORPHIC_ALLOCATOR_ARRAY_HOLDER_H
