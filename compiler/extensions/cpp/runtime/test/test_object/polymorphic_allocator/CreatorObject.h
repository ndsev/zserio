/**
 * Automatically generated by Zserio C++ generator version 1.0.2 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, polymorphicAllocator.
 */

#ifndef TEST_OBJECT_POLYMORPHIC_ALLOCATOR_CREATOR_OBJECT_H
#define TEST_OBJECT_POLYMORPHIC_ALLOCATOR_CREATOR_OBJECT_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/pmr/ITypeInfo.h>
#include <zserio/pmr/IReflectable.h>
#include <zserio/pmr/PolymorphicAllocator.h>
#include <zserio/OptionalHolder.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/pmr/ArrayTraits.h>
#include <zserio/pmr/BitBuffer.h>
#include <zserio/pmr/String.h>
#include <zserio/pmr/Vector.h>

#include <test_object/polymorphic_allocator/CreatorNested.h>

namespace test_object
{
namespace polymorphic_allocator
{

class CreatorObject
{
public:
    using allocator_type = ::zserio::pmr::PropagatingPolymorphicAllocator<>;

    CreatorObject() noexcept :
            CreatorObject(allocator_type())
    {}

    explicit CreatorObject(const allocator_type& allocator) noexcept;

    template <typename ZSERIO_T_nested = ::test_object::polymorphic_allocator::CreatorNested,
            typename ZSERIO_T_text = ::zserio::pmr::string,
            typename ZSERIO_T_nestedArray = ::zserio::pmr::vector<::test_object::polymorphic_allocator::CreatorNested>,
            typename ZSERIO_T_textArray = ::zserio::pmr::vector<::zserio::pmr::string>,
            typename ZSERIO_T_externArray = ::zserio::pmr::vector<::zserio::pmr::BitBuffer>,
            typename ZSERIO_T_bytesArray = ::zserio::pmr::vector<::zserio::pmr::vector<uint8_t>>,
            typename ZSERIO_T_optionalBool = bool,
            typename ZSERIO_T_optionalNested = ::test_object::polymorphic_allocator::CreatorNested>
    CreatorObject(
            uint32_t value_,
            ZSERIO_T_nested&& nested_,
            ZSERIO_T_text&& text_,
            ZSERIO_T_nestedArray&& nestedArray_,
            ZSERIO_T_textArray&& textArray_,
            ZSERIO_T_externArray&& externArray_,
            ZSERIO_T_bytesArray&& bytesArray_,
            ZSERIO_T_optionalBool&& optionalBool_,
            ZSERIO_T_optionalNested&& optionalNested_,
            const allocator_type& allocator = allocator_type()) :
            CreatorObject(allocator)
    {
        m_value_ = value_;
        m_nested_ = ::std::forward<ZSERIO_T_nested>(nested_);
        m_text_ = ::std::forward<ZSERIO_T_text>(text_);
        m_nestedArray_ = ZserioArrayType_nestedArray(::std::forward<ZSERIO_T_nestedArray>(nestedArray_));
        m_textArray_ = ZserioArrayType_textArray(::std::forward<ZSERIO_T_textArray>(textArray_));
        m_externArray_ = ::zserio::createOptionalArray<ZserioArrayType_externArray>(::std::forward<ZSERIO_T_externArray>(externArray_));
        m_bytesArray_ = ::zserio::createOptionalArray<ZserioArrayType_bytesArray>(::std::forward<ZSERIO_T_bytesArray>(bytesArray_));
        m_optionalBool_ = ::std::forward<ZSERIO_T_optionalBool>(optionalBool_);
        m_optionalNested_ = ::std::forward<ZSERIO_T_optionalNested>(optionalNested_);
    }

    explicit CreatorObject(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~CreatorObject() = default;

    CreatorObject(const CreatorObject& other);
    CreatorObject& operator=(const CreatorObject& other);

    CreatorObject(CreatorObject&& other);
    CreatorObject& operator=(CreatorObject&& other);

    CreatorObject(::zserio::PropagateAllocatorT,
            const CreatorObject& other, const allocator_type& allocator);

    static const ::zserio::pmr::ITypeInfo& typeInfo();
    ::zserio::pmr::IReflectableConstPtr reflectable(const allocator_type& allocator = allocator_type()) const;
    ::zserio::pmr::IReflectablePtr reflectable(const allocator_type& allocator = allocator_type());

    void initializeChildren();

    uint32_t getValue() const;
    void setValue(uint32_t value_);

    const ::test_object::polymorphic_allocator::CreatorNested& getNested() const;
    ::test_object::polymorphic_allocator::CreatorNested& getNested();
    void setNested(const ::test_object::polymorphic_allocator::CreatorNested& nested_);
    void setNested(::test_object::polymorphic_allocator::CreatorNested&& nested_);

    const ::zserio::pmr::string& getText() const;
    ::zserio::pmr::string& getText();
    void setText(const ::zserio::pmr::string& text_);
    void setText(::zserio::pmr::string&& text_);

    const ::zserio::pmr::vector<::test_object::polymorphic_allocator::CreatorNested>& getNestedArray() const;
    ::zserio::pmr::vector<::test_object::polymorphic_allocator::CreatorNested>& getNestedArray();
    void setNestedArray(const ::zserio::pmr::vector<::test_object::polymorphic_allocator::CreatorNested>& nestedArray_);
    void setNestedArray(::zserio::pmr::vector<::test_object::polymorphic_allocator::CreatorNested>&& nestedArray_);

    const ::zserio::pmr::vector<::zserio::pmr::string>& getTextArray() const;
    ::zserio::pmr::vector<::zserio::pmr::string>& getTextArray();
    void setTextArray(const ::zserio::pmr::vector<::zserio::pmr::string>& textArray_);
    void setTextArray(::zserio::pmr::vector<::zserio::pmr::string>&& textArray_);

    const ::zserio::pmr::vector<::zserio::pmr::BitBuffer>& getExternArray() const;
    ::zserio::pmr::vector<::zserio::pmr::BitBuffer>& getExternArray();
    void setExternArray(const ::zserio::pmr::vector<::zserio::pmr::BitBuffer>& externArray_);
    void setExternArray(::zserio::pmr::vector<::zserio::pmr::BitBuffer>&& externArray_);
    bool isExternArrayUsed() const;
    bool isExternArraySet() const;
    void resetExternArray();

    const ::zserio::pmr::vector<::zserio::pmr::vector<uint8_t>>& getBytesArray() const;
    ::zserio::pmr::vector<::zserio::pmr::vector<uint8_t>>& getBytesArray();
    void setBytesArray(const ::zserio::pmr::vector<::zserio::pmr::vector<uint8_t>>& bytesArray_);
    void setBytesArray(::zserio::pmr::vector<::zserio::pmr::vector<uint8_t>>&& bytesArray_);
    bool isBytesArrayUsed() const;
    bool isBytesArraySet() const;
    void resetBytesArray();

    bool getOptionalBool() const;
    void setOptionalBool(bool optionalBool_);
    bool isOptionalBoolUsed() const;
    bool isOptionalBoolSet() const;
    void resetOptionalBool();

    const ::test_object::polymorphic_allocator::CreatorNested& getOptionalNested() const;
    ::test_object::polymorphic_allocator::CreatorNested& getOptionalNested();
    void setOptionalNested(const ::test_object::polymorphic_allocator::CreatorNested& optionalNested_);
    void setOptionalNested(::test_object::polymorphic_allocator::CreatorNested&& optionalNested_);
    bool isOptionalNestedUsed() const;
    bool isOptionalNestedSet() const;
    void resetOptionalNested();

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const CreatorObject& other) const;

    bool operator<(const CreatorObject& other) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    class ZserioArrayExpressions_nestedArray
    {
    public:
        using OwnerType = CreatorObject;

        static void initializeElement(CreatorObject& owner,
                ::test_object::polymorphic_allocator::CreatorNested& element, size_t index);
    };

    class ZserioElementFactory_nestedArray
    {
    public:
        using OwnerType = CreatorObject;

        static void create(CreatorObject& owner,
                ::zserio::pmr::vector<::test_object::polymorphic_allocator::CreatorNested>& array,
                ::zserio::BitStreamReader& in, size_t index);
    };

    using ZserioArrayType_nestedArray = ::zserio::Array<::zserio::pmr::vector<::test_object::polymorphic_allocator::CreatorNested>, ::zserio::ObjectArrayTraits<::test_object::polymorphic_allocator::CreatorNested, ZserioElementFactory_nestedArray>, ::zserio::ArrayType::AUTO, ZserioArrayExpressions_nestedArray>;
    using ZserioArrayType_textArray = ::zserio::Array<::zserio::pmr::vector<::zserio::pmr::string>, ::zserio::pmr::StringArrayTraits, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_externArray = ::zserio::Array<::zserio::pmr::vector<::zserio::pmr::BitBuffer>, ::zserio::pmr::BitBufferArrayTraits, ::zserio::ArrayType::AUTO>;
    using ZserioArrayType_bytesArray = ::zserio::Array<::zserio::pmr::vector<::zserio::pmr::vector<uint8_t>>, ::zserio::pmr::BytesArrayTraits, ::zserio::ArrayType::AUTO>;

    uint32_t readValue(::zserio::BitStreamReader& in);
    ::test_object::polymorphic_allocator::CreatorNested readNested(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::pmr::string readText(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_nestedArray readNestedArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_textArray readTextArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_externArray> readExternArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<ZserioArrayType_bytesArray> readBytesArray(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::zserio::InplaceOptionalHolder<bool> readOptionalBool(::zserio::BitStreamReader& in);
    ::zserio::InplaceOptionalHolder<::test_object::polymorphic_allocator::CreatorNested> readOptionalNested(::zserio::BitStreamReader& in,
            const allocator_type& allocator);

    bool m_areChildrenInitialized;
    uint32_t m_value_;
    ::test_object::polymorphic_allocator::CreatorNested m_nested_;
    ::zserio::pmr::string m_text_;
    ZserioArrayType_nestedArray m_nestedArray_;
    ZserioArrayType_textArray m_textArray_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_externArray> m_externArray_;
    ::zserio::InplaceOptionalHolder<ZserioArrayType_bytesArray> m_bytesArray_;
    ::zserio::InplaceOptionalHolder<bool> m_optionalBool_;
    ::zserio::InplaceOptionalHolder<::test_object::polymorphic_allocator::CreatorNested> m_optionalNested_;
};

} // namespace polymorphic_allocator
} // namespace test_object

#endif // TEST_OBJECT_POLYMORPHIC_ALLOCATOR_CREATOR_OBJECT_H
