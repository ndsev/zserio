/**
 * Automatically generated by Zserio C++ generator version 1.0.2 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, polymorphicAllocator.
 */

#include <zserio/HashCodeUtil.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/TypeInfo.h>
#include <zserio/pmr/AnyHolder.h>
#include <zserio/pmr/Reflectable.h>

#include <test_object/polymorphic_allocator/WalkerBitmask.h>

namespace test_object
{
namespace polymorphic_allocator
{

WalkerBitmask::WalkerBitmask(::zserio::BitStreamReader& in) :
        m_value(readValue(in))
{}

const ::zserio::pmr::ITypeInfo& WalkerBitmask::typeInfo()
{
    using allocator_type = ::zserio::pmr::PropagatingPolymorphicAllocator<>;

    static const ::zserio::Span<::zserio::StringView> underlyingTypeArguments;

    static const ::std::array<::zserio::ItemInfo, 1> values = {
        ::zserio::ItemInfo{ ::zserio::makeStringView("ZERO"), static_cast<uint64_t>(UINT32_C(1)), false, false}
    };

    static const ::zserio::BitmaskTypeInfo<allocator_type> typeInfo = {
        ::zserio::makeStringView("test_object.polymorphic_allocator.WalkerBitmask"),
        ::zserio::BuiltinTypeInfo<allocator_type>::getUInt32(), underlyingTypeArguments, values
    };

    return typeInfo;
}

::zserio::pmr::IReflectablePtr WalkerBitmask::reflectable(const ::zserio::pmr::PropagatingPolymorphicAllocator<>& allocator) const
{
    class Reflectable : public ::zserio::ReflectableBase<::zserio::pmr::PropagatingPolymorphicAllocator<>>
    {
    public:
        explicit Reflectable(::test_object::polymorphic_allocator::WalkerBitmask bitmask) :
                ::zserio::ReflectableBase<::zserio::pmr::PropagatingPolymorphicAllocator<>>(::test_object::polymorphic_allocator::WalkerBitmask::typeInfo()),
                m_bitmask(bitmask)
        {}

        size_t bitSizeOf(size_t bitPosition) const override
        {
            return m_bitmask.bitSizeOf(bitPosition);
        }

        void write(::zserio::BitStreamWriter& writer) const override
        {
            m_bitmask.write(writer);
        }

        ::zserio::pmr::AnyHolder getAnyValue(const ::zserio::pmr::PropagatingPolymorphicAllocator<>& alloc) const override
        {
            return ::zserio::pmr::AnyHolder(m_bitmask, alloc);
        }

        ::zserio::pmr::AnyHolder getAnyValue(const ::zserio::pmr::PropagatingPolymorphicAllocator<>& alloc) override
        {
            return ::zserio::pmr::AnyHolder(m_bitmask, alloc);
        }

        uint32_t getUInt32() const override
        {
            return m_bitmask.getValue();
        }

        uint64_t toUInt() const override
        {
            return m_bitmask.getValue();
        }

        double toDouble() const override
        {
            return static_cast<double>(toUInt());
        }

        ::zserio::pmr::string toString(const ::zserio::pmr::PropagatingPolymorphicAllocator<>& alloc) const override
        {
            return m_bitmask.toString(alloc);
        }

    private:
        ::test_object::polymorphic_allocator::WalkerBitmask m_bitmask;
    };

    return ::std::allocate_shared<Reflectable>(allocator, *this);
}

size_t WalkerBitmask::bitSizeOf(size_t) const
{
    return UINT8_C(32);
}

size_t WalkerBitmask::initializeOffsets(size_t bitPosition) const
{
    return bitPosition + bitSizeOf(bitPosition);
}

uint32_t WalkerBitmask::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;
    result = ::zserio::calcHashCode(result, m_value);
    return result;
}

void WalkerBitmask::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_value, UINT8_C(32));
}

::zserio::pmr::string WalkerBitmask::toString(const ::zserio::pmr::string::allocator_type& allocator) const
{
    ::zserio::pmr::string result(allocator);
    if ((*this & WalkerBitmask::Values::ZERO) == WalkerBitmask::Values::ZERO)
    {
        result += result.empty() ? "ZERO" : " | ZERO";
    }

    return ::zserio::toString<::zserio::pmr::string::allocator_type>(m_value, allocator) + "[" + result + "]";
}

WalkerBitmask::underlying_type WalkerBitmask::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<underlying_type>(in.readBits(UINT8_C(32)));
}

} // namespace polymorphic_allocator
} // namespace test_object
