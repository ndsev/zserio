/**
 * Automatically generated by Zserio C++ generator version 1.0.2 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/TypeInfo.h>
#include <zserio/AnyHolder.h>
#include <zserio/Reflectable.h>
#include <zserio/ConstraintException.h>
#include <functional>

#include <test_object/std_allocator/ArrayParamObject.h>

namespace test_object
{
namespace std_allocator
{

ArrayParamObject::ArrayParamObject(const allocator_type&) noexcept :
        m_isInitialized(false),
        m_value_(uint32_t())
{
}

ArrayParamObject::ArrayParamObject(::zserio::BitStreamReader& in,
        ::test_object::std_allocator::ArrayObject& param_, const allocator_type&) :
        m_param_(&param_),
        m_isInitialized(true),
        m_value_(readValue(in))
{
}

ArrayParamObject::ArrayParamObject(ArrayParamObject::ZserioPackingContext& context, ::zserio::BitStreamReader& in,
        ::test_object::std_allocator::ArrayObject& param_, const allocator_type&) :
        m_param_(&param_),
        m_isInitialized(true),
        m_value_(readValue(context, in))
{
}

ArrayParamObject::ArrayParamObject(const ArrayParamObject& other) :
        m_value_(other.m_value_)
{
    if (other.m_isInitialized)
    {
        initialize(*(other.m_param_));
    }
    else
    {
        m_isInitialized = false;
    }
}

ArrayParamObject& ArrayParamObject::operator=(const ArrayParamObject& other)
{
    m_value_ = other.m_value_;
    if (other.m_isInitialized)
    {
        initialize(*(other.m_param_));
    }
    else
    {
        m_isInitialized = false;
    }

    return *this;
}

ArrayParamObject::ArrayParamObject(ArrayParamObject&& other) :
        m_value_(::std::move(other.m_value_))
{
    if (other.m_isInitialized)
    {
        initialize(*(other.m_param_));
    }
    else
    {
        m_isInitialized = false;
    }
}

ArrayParamObject& ArrayParamObject::operator=(ArrayParamObject&& other)
{
    m_value_ = ::std::move(other.m_value_);
    if (other.m_isInitialized)
    {
        initialize(*(other.m_param_));
    }
    else
    {
        m_isInitialized = false;
    }

    return *this;
}

ArrayParamObject::ArrayParamObject(::zserio::NoInitT,
        const ArrayParamObject& other) :
        m_isInitialized(false),
        m_value_(other.m_value_)
{
}

ArrayParamObject& ArrayParamObject::assign(::zserio::NoInitT,
        const ArrayParamObject& other)
{
    m_isInitialized = false;
    m_value_ = other.m_value_;

    return *this;
}

ArrayParamObject::ArrayParamObject(::zserio::NoInitT,
        ArrayParamObject&& other) :
        m_isInitialized(false),
        m_value_(::std::move(other.m_value_))
{
}

ArrayParamObject& ArrayParamObject::assign(::zserio::NoInitT,
        ArrayParamObject&& other)
{
    m_isInitialized = false;
    m_value_ = ::std::move(other.m_value_);

    return *this;
}

ArrayParamObject::ArrayParamObject(::zserio::PropagateAllocatorT,
        const ArrayParamObject& other, const allocator_type& allocator) :
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator))
{
    if (other.m_isInitialized)
    {
        initialize(*(other.m_param_));
    }
    else
    {
        m_isInitialized = false;
    }
}

ArrayParamObject::ArrayParamObject(::zserio::PropagateAllocatorT, ::zserio::NoInitT,
        const ArrayParamObject& other, const allocator_type& allocator) :
        m_isInitialized(false),
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator))
{
}

const ::zserio::ITypeInfo& ArrayParamObject::typeInfo()
{
    static const ::zserio::StringView templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<allocator_type>> templateArguments;

    static const ::std::array<::zserio::BasicFieldInfo<allocator_type>, 1> fields = {
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("value"), // schemaName
            ::zserio::BuiltinTypeInfo<allocator_type>::getUInt32(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            ::zserio::makeStringView("getValue() < getParam().getValue()"), // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::std::array<::zserio::BasicParameterInfo<allocator_type>, 1> parameters = {
        ::zserio::BasicParameterInfo<allocator_type>{
            ::zserio::makeStringView("param"),
            ::test_object::std_allocator::ArrayObject::typeInfo()
        }
    };

    static const ::zserio::Span<::zserio::BasicFunctionInfo<allocator_type>> functions;

    static const ::zserio::StructTypeInfo<allocator_type> typeInfo = {
        ::zserio::makeStringView("test_object.std_allocator.ArrayParamObject"),
        [](const allocator_type& allocator) -> ::zserio::IReflectablePtr
        {
            return std::allocate_shared<::zserio::ReflectableOwner<ArrayParamObject>>(allocator, allocator);
        },
        templateName, templateArguments,
        fields, parameters, functions
    };

    return typeInfo;
}

::zserio::IReflectableConstPtr ArrayParamObject::reflectable(const allocator_type& allocator) const
{
    class Reflectable : public ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>
    {
    public:
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getField;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getParameter;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::callFunction;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getAnyValue;

        explicit Reflectable(const ::test_object::std_allocator::ArrayParamObject& object, const allocator_type& alloc) :
                ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>(::test_object::std_allocator::ArrayParamObject::typeInfo(), alloc),
                m_object(object)
        {}

        size_t bitSizeOf(size_t bitPosition) const override
        {
            return m_object.bitSizeOf(bitPosition);
        }

        void write(::zserio::BitStreamWriter& writer) const override
        {
            m_object.write(writer);
        }

        ::zserio::IReflectableConstPtr getField(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        ::zserio::IReflectableConstPtr getParameter(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("param"))
            {
                return m_object.getParam().reflectable(get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) const override
        {
            return ::zserio::AnyHolder<>(::std::cref(m_object), alloc);
        }

    private:
        const ::test_object::std_allocator::ArrayParamObject& m_object;
    };

    return std::allocate_shared<Reflectable>(allocator, *this, allocator);
}

::zserio::IReflectablePtr ArrayParamObject::reflectable(const allocator_type& allocator)
{
    class Reflectable : public ::zserio::ReflectableAllocatorHolderBase<allocator_type>
    {
    public:
        explicit Reflectable(::test_object::std_allocator::ArrayParamObject& object, const allocator_type& alloc) :
                ::zserio::ReflectableAllocatorHolderBase<allocator_type>(::test_object::std_allocator::ArrayParamObject::typeInfo(), alloc),
                m_object(object)
        {}

        void initializeChildren() override
        {
        }

        void initialize(
                const ::zserio::vector<::zserio::AnyHolder<allocator_type>, allocator_type>& typeArguments) override
        {
            if (typeArguments.size() != 1)
            {
                throw ::zserio::CppRuntimeException("Not enough arguments to ArrayParamObject::initialize, ") <<
                        "expecting 1, got " << typeArguments.size();
            }

            m_object.initialize(
                typeArguments[0].get<::std::reference_wrapper<::test_object::std_allocator::ArrayObject>>().get()
            );
        }

        size_t initializeOffsets(size_t bitPosition) override
        {
            return m_object.initializeOffsets(bitPosition);
        }

        size_t bitSizeOf(size_t bitPosition) const override
        {
            return m_object.bitSizeOf(bitPosition);
        }

        void write(::zserio::BitStreamWriter& writer) const override
        {
            m_object.write(writer);
        }

        ::zserio::IReflectableConstPtr getField(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        ::zserio::IReflectablePtr getField(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        void setField(::zserio::StringView name,
                const ::zserio::AnyHolder<allocator_type>& value) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                m_object.setValue(value.get<uint32_t>());
                return;
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        ::zserio::IReflectablePtr createField(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                m_object.setValue(uint32_t());
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        ::zserio::IReflectableConstPtr getParameter(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("param"))
            {
                return m_object.getParam().reflectable(get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        ::zserio::IReflectablePtr getParameter(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("param"))
            {
                return m_object.getParam().reflectable(get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'ArrayParamObject'!";
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) const override
        {
            return ::zserio::AnyHolder<>(::std::cref(m_object), alloc);
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) override
        {
            return ::zserio::AnyHolder<>(::std::ref(m_object), alloc);
        }

    private:
        ::test_object::std_allocator::ArrayParamObject& m_object;
    };

    return std::allocate_shared<Reflectable>(allocator, *this, allocator);
}

void ArrayParamObject::initialize(
        ::test_object::std_allocator::ArrayObject& param_)
{
    m_param_ = &param_;
    m_isInitialized = true;
}

bool ArrayParamObject::isInitialized() const
{
    return m_isInitialized;
}

::test_object::std_allocator::ArrayObject& ArrayParamObject::getParam()
{
    if (!m_isInitialized)
    {
        throw ::zserio::CppRuntimeException("Parameter 'param' of compound 'ArrayParamObject' is not initialized!");
    }

    return *m_param_;
}

const ::test_object::std_allocator::ArrayObject& ArrayParamObject::getParam() const
{
    if (!m_isInitialized)
    {
        throw ::zserio::CppRuntimeException("Parameter 'param' of compound 'ArrayParamObject' is not initialized!");
    }

    return *m_param_;
}

uint32_t ArrayParamObject::getValue() const
{
    return m_value_;
}

void ArrayParamObject::setValue(uint32_t value_)
{
    m_value_ = value_;
}

void ArrayParamObject::initPackingContext(ArrayParamObject::ZserioPackingContext& context) const
{
    context.getValue().init<::zserio::StdIntArrayTraits<uint32_t>>(m_value_);
}

size_t ArrayParamObject::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition - bitPosition;
}

size_t ArrayParamObject::bitSizeOf(ArrayParamObject::ZserioPackingContext& context, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getValue().bitSizeOf<::zserio::StdIntArrayTraits<uint32_t>>(m_value_);

    return endBitPosition - bitPosition;
}

size_t ArrayParamObject::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition;
}

size_t ArrayParamObject::initializeOffsets(ArrayParamObject::ZserioPackingContext& context, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += context.getValue().bitSizeOf<::zserio::StdIntArrayTraits<uint32_t>>(m_value_);

    return endBitPosition;
}

bool ArrayParamObject::operator==(const ArrayParamObject& other) const
{
    if (this != &other)
    {
        return
                (getParam() == other.getParam()) &&
                (m_value_ == other.m_value_);
    }

    return true;
}

bool ArrayParamObject::operator<(const ArrayParamObject& other) const
{
    if (getParam() < other.getParam())
    {
        return true;
    }
    if (other.getParam() < getParam())
    {
        return false;
    }

    if (m_value_ < other.m_value_)
    {
        return true;
    }
    if (other.m_value_ < m_value_)
    {
        return false;
    }

    return false;
}

uint32_t ArrayParamObject::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getParam());
    result = ::zserio::calcHashCode(result, m_value_);

    return result;
}

void ArrayParamObject::write(::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getValue() < getParam().getValue()))
    {
        throw ::zserio::ConstraintException("Write: Constraint violated at ArrayParamObject.value!");
    }
    out.writeBits(m_value_, UINT8_C(32));
}

void ArrayParamObject::write(ArrayParamObject::ZserioPackingContext& context, ::zserio::BitStreamWriter& out) const
{
    // check constraint
    if (!(getValue() < getParam().getValue()))
    {
        throw ::zserio::ConstraintException("Write: Constraint violated at ArrayParamObject.value!");
    }
    context.getValue().write<::zserio::StdIntArrayTraits<uint32_t>>(out, m_value_);
}

uint32_t ArrayParamObject::readValue(::zserio::BitStreamReader& in)
{
    uint32_t readField = static_cast<uint32_t>(in.readBits(UINT8_C(32)));
    // check constraint
    if (!(readField < getParam().getValue()))
    {
        throw ::zserio::ConstraintException("Read: Constraint violated at ArrayParamObject.value!");
    }

    return readField;
}

uint32_t ArrayParamObject::readValue(ArrayParamObject::ZserioPackingContext& context, ::zserio::BitStreamReader& in)
{
    uint32_t readField = context.getValue().read<::zserio::StdIntArrayTraits<uint32_t>>(in);
    // check constraint
    if (!(readField < getParam().getValue()))
    {
        throw ::zserio::ConstraintException("Read: Constraint violated at ArrayParamObject.value!");
    }

    return readField;
}


} // namespace std_allocator
} // namespace test_object
