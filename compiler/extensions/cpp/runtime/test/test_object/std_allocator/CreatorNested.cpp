/**
 * Automatically generated by Zserio C++ generator version 1.0.2 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/TypeInfo.h>
#include <zserio/AnyHolder.h>
#include <zserio/Reflectable.h>

#include <test_object/std_allocator/CreatorNested.h>

namespace test_object
{
namespace std_allocator
{

CreatorNested::CreatorNested(const allocator_type& allocator) noexcept :
        m_isInitialized(false),
        m_value_(uint32_t()),
        m_text_(allocator),
        m_externData_(allocator),
        m_bytesData_(allocator),
        m_creatorEnum_(::test_object::std_allocator::CreatorEnum()),
        m_creatorBitmask_(::test_object::std_allocator::CreatorBitmask())
{
}

CreatorNested::CreatorNested(::zserio::BitStreamReader& in,
        uint32_t param_, const allocator_type& allocator) :
        m_param_(param_),
        m_isInitialized(true),
        m_value_(readValue(in)),
        m_text_(readText(in, allocator)),
        m_externData_(readExternData(in, allocator)),
        m_bytesData_(readBytesData(in, allocator)),
        m_creatorEnum_(readCreatorEnum(in)),
        m_creatorBitmask_(readCreatorBitmask(in))
{
}

CreatorNested::CreatorNested(const CreatorNested& other) :
        m_value_(other.m_value_),
        m_text_(other.m_text_),
        m_externData_(other.m_externData_),
        m_bytesData_(other.m_bytesData_),
        m_creatorEnum_(other.m_creatorEnum_),
        m_creatorBitmask_(other.m_creatorBitmask_)
{
    if (other.m_isInitialized)
    {
        initialize(other.m_param_);
    }
    else
    {
        m_isInitialized = false;
    }
}

CreatorNested& CreatorNested::operator=(const CreatorNested& other)
{
    m_value_ = other.m_value_;
    m_text_ = other.m_text_;
    m_externData_ = other.m_externData_;
    m_bytesData_ = other.m_bytesData_;
    m_creatorEnum_ = other.m_creatorEnum_;
    m_creatorBitmask_ = other.m_creatorBitmask_;
    if (other.m_isInitialized)
    {
        initialize(other.m_param_);
    }
    else
    {
        m_isInitialized = false;
    }

    return *this;
}

CreatorNested::CreatorNested(CreatorNested&& other) :
        m_value_(::std::move(other.m_value_)),
        m_text_(::std::move(other.m_text_)),
        m_externData_(::std::move(other.m_externData_)),
        m_bytesData_(::std::move(other.m_bytesData_)),
        m_creatorEnum_(::std::move(other.m_creatorEnum_)),
        m_creatorBitmask_(::std::move(other.m_creatorBitmask_))
{
    if (other.m_isInitialized)
    {
        initialize(other.m_param_);
    }
    else
    {
        m_isInitialized = false;
    }
}

CreatorNested& CreatorNested::operator=(CreatorNested&& other)
{
    m_value_ = ::std::move(other.m_value_);
    m_text_ = ::std::move(other.m_text_);
    m_externData_ = ::std::move(other.m_externData_);
    m_bytesData_ = ::std::move(other.m_bytesData_);
    m_creatorEnum_ = ::std::move(other.m_creatorEnum_);
    m_creatorBitmask_ = ::std::move(other.m_creatorBitmask_);
    if (other.m_isInitialized)
    {
        initialize(other.m_param_);
    }
    else
    {
        m_isInitialized = false;
    }

    return *this;
}

CreatorNested::CreatorNested(::zserio::NoInitT,
        const CreatorNested& other) :
        m_isInitialized(false),
        m_value_(other.m_value_),
        m_text_(other.m_text_),
        m_externData_(other.m_externData_),
        m_bytesData_(other.m_bytesData_),
        m_creatorEnum_(other.m_creatorEnum_),
        m_creatorBitmask_(other.m_creatorBitmask_)
{
}

CreatorNested& CreatorNested::assign(::zserio::NoInitT,
        const CreatorNested& other)
{
    m_isInitialized = false;
    m_value_ = other.m_value_;
    m_text_ = other.m_text_;
    m_externData_ = other.m_externData_;
    m_bytesData_ = other.m_bytesData_;
    m_creatorEnum_ = other.m_creatorEnum_;
    m_creatorBitmask_ = other.m_creatorBitmask_;

    return *this;
}

CreatorNested::CreatorNested(::zserio::NoInitT,
        CreatorNested&& other) :
        m_isInitialized(false),
        m_value_(::std::move(other.m_value_)),
        m_text_(::std::move(other.m_text_)),
        m_externData_(::std::move(other.m_externData_)),
        m_bytesData_(::std::move(other.m_bytesData_)),
        m_creatorEnum_(::std::move(other.m_creatorEnum_)),
        m_creatorBitmask_(::std::move(other.m_creatorBitmask_))
{
}

CreatorNested& CreatorNested::assign(::zserio::NoInitT,
        CreatorNested&& other)
{
    m_isInitialized = false;
    m_value_ = ::std::move(other.m_value_);
    m_text_ = ::std::move(other.m_text_);
    m_externData_ = ::std::move(other.m_externData_);
    m_bytesData_ = ::std::move(other.m_bytesData_);
    m_creatorEnum_ = ::std::move(other.m_creatorEnum_);
    m_creatorBitmask_ = ::std::move(other.m_creatorBitmask_);

    return *this;
}

CreatorNested::CreatorNested(::zserio::PropagateAllocatorT,
        const CreatorNested& other, const allocator_type& allocator) :
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator)),
        m_text_(::zserio::allocatorPropagatingCopy(other.m_text_, allocator)),
        m_externData_(::zserio::allocatorPropagatingCopy(other.m_externData_, allocator)),
        m_bytesData_(::zserio::allocatorPropagatingCopy(other.m_bytesData_, allocator)),
        m_creatorEnum_(::zserio::allocatorPropagatingCopy(other.m_creatorEnum_, allocator)),
        m_creatorBitmask_(::zserio::allocatorPropagatingCopy(other.m_creatorBitmask_, allocator))
{
    if (other.m_isInitialized)
    {
        initialize(other.m_param_);
    }
    else
    {
        m_isInitialized = false;
    }
}

CreatorNested::CreatorNested(::zserio::PropagateAllocatorT, ::zserio::NoInitT,
        const CreatorNested& other, const allocator_type& allocator) :
        m_isInitialized(false),
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator)),
        m_text_(::zserio::allocatorPropagatingCopy(other.m_text_, allocator)),
        m_externData_(::zserio::allocatorPropagatingCopy(other.m_externData_, allocator)),
        m_bytesData_(::zserio::allocatorPropagatingCopy(other.m_bytesData_, allocator)),
        m_creatorEnum_(::zserio::allocatorPropagatingCopy(other.m_creatorEnum_, allocator)),
        m_creatorBitmask_(::zserio::allocatorPropagatingCopy(other.m_creatorBitmask_, allocator))
{
}

const ::zserio::ITypeInfo& CreatorNested::typeInfo()
{
    static const ::zserio::StringView templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<allocator_type>> templateArguments;

    static const ::std::array<::zserio::BasicFieldInfo<allocator_type>, 6> fields = {
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("value"), // schemaName
            ::zserio::BuiltinTypeInfo<allocator_type>::getUInt32(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("text"), // schemaName
            ::zserio::BuiltinTypeInfo<allocator_type>::getString(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("externData"), // schemaName
            ::zserio::BuiltinTypeInfo<allocator_type>::getBitBuffer(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("bytesData"), // schemaName
            ::zserio::BuiltinTypeInfo<allocator_type>::getBytes(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("creatorEnum"), // schemaName
            ::zserio::enumTypeInfo<::test_object::std_allocator::CreatorEnum, allocator_type>(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("creatorBitmask"), // schemaName
            ::test_object::std_allocator::CreatorBitmask::typeInfo(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::std::array<::zserio::BasicParameterInfo<allocator_type>, 1> parameters = {
        ::zserio::BasicParameterInfo<allocator_type>{
            ::zserio::makeStringView("param"),
            ::zserio::BuiltinTypeInfo<allocator_type>::getUInt32()
        }
    };

    static const ::zserio::Span<::zserio::BasicFunctionInfo<allocator_type>> functions;

    static const ::zserio::StructTypeInfo<allocator_type> typeInfo = {
        ::zserio::makeStringView("test_object.std_allocator.CreatorNested"),
        [](const allocator_type& allocator) -> ::zserio::IReflectablePtr
        {
            return std::allocate_shared<::zserio::ReflectableOwner<CreatorNested>>(allocator, allocator);
        },
        templateName, templateArguments,
        fields, parameters, functions
    };

    return typeInfo;
}

::zserio::IReflectableConstPtr CreatorNested::reflectable(const allocator_type& allocator) const
{
    class Reflectable : public ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>
    {
    public:
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getField;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getParameter;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::callFunction;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getAnyValue;

        explicit Reflectable(const ::test_object::std_allocator::CreatorNested& object, const allocator_type& alloc) :
                ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>(::test_object::std_allocator::CreatorNested::typeInfo(), alloc),
                m_object(object)
        {}

        size_t bitSizeOf(size_t bitPosition) const override
        {
            return m_object.bitSizeOf(bitPosition);
        }

        void write(::zserio::BitStreamWriter& writer) const override
        {
            m_object.write(writer);
        }

        ::zserio::IReflectableConstPtr getField(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("externData"))
            {
                return ::zserio::ReflectableFactory::getBitBuffer(m_object.getExternData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("bytesData"))
            {
                return ::zserio::ReflectableFactory::getBytes(m_object.getBytesData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorEnum"))
            {
                return ::zserio::enumReflectable(m_object.getCreatorEnum(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorBitmask"))
            {
                return m_object.getCreatorBitmask().reflectable(get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        ::zserio::IReflectableConstPtr getParameter(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("param"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getParam(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) const override
        {
            return ::zserio::AnyHolder<>(::std::cref(m_object), alloc);
        }

    private:
        const ::test_object::std_allocator::CreatorNested& m_object;
    };

    return std::allocate_shared<Reflectable>(allocator, *this, allocator);
}

::zserio::IReflectablePtr CreatorNested::reflectable(const allocator_type& allocator)
{
    class Reflectable : public ::zserio::ReflectableAllocatorHolderBase<allocator_type>
    {
    public:
        explicit Reflectable(::test_object::std_allocator::CreatorNested& object, const allocator_type& alloc) :
                ::zserio::ReflectableAllocatorHolderBase<allocator_type>(::test_object::std_allocator::CreatorNested::typeInfo(), alloc),
                m_object(object)
        {}

        void initializeChildren() override
        {
        }

        void initialize(
                const ::zserio::vector<::zserio::AnyHolder<allocator_type>, allocator_type>& typeArguments) override
        {
            if (typeArguments.size() != 1)
            {
                throw ::zserio::CppRuntimeException("Not enough arguments to CreatorNested::initialize, ") <<
                        "expecting 1, got " << typeArguments.size();
            }

            m_object.initialize(
                typeArguments[0].get<uint32_t>()
            );
        }

        size_t initializeOffsets(size_t bitPosition) override
        {
            return m_object.initializeOffsets(bitPosition);
        }

        size_t bitSizeOf(size_t bitPosition) const override
        {
            return m_object.bitSizeOf(bitPosition);
        }

        void write(::zserio::BitStreamWriter& writer) const override
        {
            m_object.write(writer);
        }

        ::zserio::IReflectableConstPtr getField(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("externData"))
            {
                return ::zserio::ReflectableFactory::getBitBuffer(m_object.getExternData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("bytesData"))
            {
                return ::zserio::ReflectableFactory::getBytes(m_object.getBytesData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorEnum"))
            {
                return ::zserio::enumReflectable(m_object.getCreatorEnum(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorBitmask"))
            {
                return m_object.getCreatorBitmask().reflectable(get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        ::zserio::IReflectablePtr getField(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("externData"))
            {
                return ::zserio::ReflectableFactory::getBitBuffer(m_object.getExternData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("bytesData"))
            {
                return ::zserio::ReflectableFactory::getBytes(m_object.getBytesData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorEnum"))
            {
                return ::zserio::enumReflectable(m_object.getCreatorEnum(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorBitmask"))
            {
                return m_object.getCreatorBitmask().reflectable(get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        void setField(::zserio::StringView name,
                const ::zserio::AnyHolder<allocator_type>& value) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                m_object.setValue(value.get<uint32_t>());
                return;
            }
            if (name == ::zserio::makeStringView("text"))
            {
                m_object.setText(value.get<::zserio::string<>>());
                return;
            }
            if (name == ::zserio::makeStringView("externData"))
            {
                m_object.setExternData(value.get<::zserio::BitBuffer>());
                return;
            }
            if (name == ::zserio::makeStringView("bytesData"))
            {
                m_object.setBytesData(value.get<::zserio::vector<uint8_t>>());
                return;
            }
            if (name == ::zserio::makeStringView("creatorEnum"))
            {
                if (value.isType<::test_object::std_allocator::CreatorEnum>())
                {
                    m_object.setCreatorEnum(value.get<::test_object::std_allocator::CreatorEnum>());
                }
                else
                {
                    m_object.setCreatorEnum(::zserio::valueToEnum<::test_object::std_allocator::CreatorEnum>(
                            value.get<typename ::std::underlying_type<::test_object::std_allocator::CreatorEnum>::type>()));
                }
                return;
            }
            if (name == ::zserio::makeStringView("creatorBitmask"))
            {
                if (value.isType<::test_object::std_allocator::CreatorBitmask>())
                {
                    m_object.setCreatorBitmask(value.get<::test_object::std_allocator::CreatorBitmask>());
                }
                else
                {
                    m_object.setCreatorBitmask(::test_object::std_allocator::CreatorBitmask(
                            value.get<::test_object::std_allocator::CreatorBitmask::underlying_type>()));
                }
                return;
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        ::zserio::IReflectablePtr createField(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                m_object.setValue(uint32_t());
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                m_object.setText(::zserio::string<>(get_allocator()));
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("externData"))
            {
                m_object.setExternData(::zserio::BitBuffer(get_allocator()));
                return ::zserio::ReflectableFactory::getBitBuffer(m_object.getExternData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("bytesData"))
            {
                m_object.setBytesData(::zserio::vector<uint8_t>(get_allocator()));
                return ::zserio::ReflectableFactory::getBytes(m_object.getBytesData(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorEnum"))
            {
                m_object.setCreatorEnum(::test_object::std_allocator::CreatorEnum());
                return ::zserio::enumReflectable(m_object.getCreatorEnum(), get_allocator());
            }
            if (name == ::zserio::makeStringView("creatorBitmask"))
            {
                m_object.setCreatorBitmask(::test_object::std_allocator::CreatorBitmask());
                return m_object.getCreatorBitmask().reflectable(get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        ::zserio::IReflectableConstPtr getParameter(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("param"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getParam(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        ::zserio::IReflectablePtr getParameter(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("param"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getParam(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Parameter '") << name << "' doesn't exist in 'CreatorNested'!";
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) const override
        {
            return ::zserio::AnyHolder<>(::std::cref(m_object), alloc);
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) override
        {
            return ::zserio::AnyHolder<>(::std::ref(m_object), alloc);
        }

    private:
        ::test_object::std_allocator::CreatorNested& m_object;
    };

    return std::allocate_shared<Reflectable>(allocator, *this, allocator);
}

void CreatorNested::initialize(
        uint32_t param_)
{
    m_param_ = param_;
    m_isInitialized = true;
}

bool CreatorNested::isInitialized() const
{
    return m_isInitialized;
}

uint32_t CreatorNested::getParam() const
{
    if (!m_isInitialized)
    {
        throw ::zserio::CppRuntimeException("Parameter 'param' of compound 'CreatorNested' is not initialized!");
    }

    return m_param_;
}

uint32_t CreatorNested::getValue() const
{
    return m_value_;
}

void CreatorNested::setValue(uint32_t value_)
{
    m_value_ = value_;
}

::zserio::string<>& CreatorNested::getText()
{
    return m_text_;
}

const ::zserio::string<>& CreatorNested::getText() const
{
    return m_text_;
}

void CreatorNested::setText(const ::zserio::string<>& text_)
{
    m_text_ = text_;
}

void CreatorNested::setText(::zserio::string<>&& text_)
{
    m_text_ = ::std::move(text_);
}

::zserio::BitBuffer& CreatorNested::getExternData()
{
    return m_externData_;
}

const ::zserio::BitBuffer& CreatorNested::getExternData() const
{
    return m_externData_;
}

void CreatorNested::setExternData(const ::zserio::BitBuffer& externData_)
{
    m_externData_ = externData_;
}

void CreatorNested::setExternData(::zserio::BitBuffer&& externData_)
{
    m_externData_ = ::std::move(externData_);
}

::zserio::vector<uint8_t>& CreatorNested::getBytesData()
{
    return m_bytesData_;
}

const ::zserio::vector<uint8_t>& CreatorNested::getBytesData() const
{
    return m_bytesData_;
}

void CreatorNested::setBytesData(const ::zserio::vector<uint8_t>& bytesData_)
{
    m_bytesData_ = bytesData_;
}

void CreatorNested::setBytesData(::zserio::vector<uint8_t>&& bytesData_)
{
    m_bytesData_ = ::std::move(bytesData_);
}

::test_object::std_allocator::CreatorEnum CreatorNested::getCreatorEnum() const
{
    return m_creatorEnum_;
}

void CreatorNested::setCreatorEnum(::test_object::std_allocator::CreatorEnum creatorEnum_)
{
    m_creatorEnum_ = creatorEnum_;
}

::test_object::std_allocator::CreatorBitmask CreatorNested::getCreatorBitmask() const
{
    return m_creatorBitmask_;
}

void CreatorNested::setCreatorBitmask(::test_object::std_allocator::CreatorBitmask creatorBitmask_)
{
    m_creatorBitmask_ = creatorBitmask_;
}

size_t CreatorNested::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);
    endBitPosition += ::zserio::bitSizeOfString(m_text_);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_externData_);
    endBitPosition += ::zserio::bitSizeOfBytes(m_bytesData_);
    endBitPosition += ::zserio::bitSizeOf(m_creatorEnum_);
    endBitPosition += m_creatorBitmask_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t CreatorNested::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);
    endBitPosition += ::zserio::bitSizeOfString(m_text_);
    endBitPosition += ::zserio::bitSizeOfBitBuffer(m_externData_);
    endBitPosition += ::zserio::bitSizeOfBytes(m_bytesData_);
    endBitPosition = ::zserio::initializeOffsets(endBitPosition, m_creatorEnum_);
    endBitPosition = m_creatorBitmask_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

bool CreatorNested::operator==(const CreatorNested& other) const
{
    if (this != &other)
    {
        return
                (getParam() == other.getParam()) &&
                (m_value_ == other.m_value_) &&
                (m_text_ == other.m_text_) &&
                (m_externData_ == other.m_externData_) &&
                (m_bytesData_ == other.m_bytesData_) &&
                (m_creatorEnum_ == other.m_creatorEnum_) &&
                (m_creatorBitmask_ == other.m_creatorBitmask_);
    }

    return true;
}

bool CreatorNested::operator<(const CreatorNested& other) const
{
    if (getParam() < other.getParam())
    {
        return true;
    }
    if (other.getParam() < getParam())
    {
        return false;
    }

    if (m_value_ < other.m_value_)
    {
        return true;
    }
    if (other.m_value_ < m_value_)
    {
        return false;
    }

    if (m_text_ < other.m_text_)
    {
        return true;
    }
    if (other.m_text_ < m_text_)
    {
        return false;
    }

    if (m_externData_ < other.m_externData_)
    {
        return true;
    }
    if (other.m_externData_ < m_externData_)
    {
        return false;
    }

    if (m_bytesData_ < other.m_bytesData_)
    {
        return true;
    }
    if (other.m_bytesData_ < m_bytesData_)
    {
        return false;
    }

    if (m_creatorEnum_ < other.m_creatorEnum_)
    {
        return true;
    }
    if (other.m_creatorEnum_ < m_creatorEnum_)
    {
        return false;
    }

    if (m_creatorBitmask_ < other.m_creatorBitmask_)
    {
        return true;
    }
    if (other.m_creatorBitmask_ < m_creatorBitmask_)
    {
        return false;
    }

    return false;
}

uint32_t CreatorNested::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, getParam());
    result = ::zserio::calcHashCode(result, m_value_);
    result = ::zserio::calcHashCode(result, m_text_);
    result = ::zserio::calcHashCode(result, m_externData_);
    result = ::zserio::calcHashCode(result, m_bytesData_);
    result = ::zserio::calcHashCode(result, m_creatorEnum_);
    result = ::zserio::calcHashCode(result, m_creatorBitmask_);

    return result;
}

void CreatorNested::write(::zserio::BitStreamWriter& out) const
{
    out.writeBits(m_value_, UINT8_C(32));
    out.writeString(m_text_);
    out.writeBitBuffer(m_externData_);
    out.writeBytes(m_bytesData_);
    ::zserio::write(out, m_creatorEnum_);
    m_creatorBitmask_.write(out);
}

uint32_t CreatorNested::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<uint32_t>(in.readBits(UINT8_C(32)));
}

::zserio::string<> CreatorNested::readText(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::string<>>(in.readString(allocator));
}

::zserio::BitBuffer CreatorNested::readExternData(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::BitBuffer>(in.readBitBuffer(allocator));
}

::zserio::vector<uint8_t> CreatorNested::readBytesData(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return static_cast<::zserio::vector<uint8_t>>(in.readBytes(allocator));
}

::test_object::std_allocator::CreatorEnum CreatorNested::readCreatorEnum(::zserio::BitStreamReader& in)
{
    return ::zserio::read<::test_object::std_allocator::CreatorEnum>(in);
}

::test_object::std_allocator::CreatorBitmask CreatorNested::readCreatorBitmask(::zserio::BitStreamReader& in)
{
    return ::test_object::std_allocator::CreatorBitmask(in);
}


} // namespace std_allocator
} // namespace test_object
