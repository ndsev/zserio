/**
 * Automatically generated by Zserio C++ generator version 1.0.2 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, stdAllocator.
 */

#ifndef TEST_OBJECT_STD_ALLOCATOR_REFLECTABLE_NESTED_H
#define TEST_OBJECT_STD_ALLOCATOR_REFLECTABLE_NESTED_H

#include <zserio/Traits.h>
#include <zserio/NoInit.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <zserio/ITypeInfo.h>
#include <zserio/IReflectable.h>
#include <memory>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/Types.h>

namespace test_object
{
namespace std_allocator
{

class ReflectableNested
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    ReflectableNested() noexcept :
            ReflectableNested(allocator_type())
    {}

    explicit ReflectableNested(const allocator_type& allocator) noexcept;

    explicit ReflectableNested(
            uint32_t value_,
            const allocator_type& allocator = allocator_type()) :
            ReflectableNested(allocator)
    {
        m_value_ = value_;
    }

    explicit ReflectableNested(::zserio::BitStreamReader& in,
            int32_t dummyParam_,
            ::zserio::string<>& stringParam_, const allocator_type& allocator = allocator_type());

    ~ReflectableNested() = default;

    ReflectableNested(const ReflectableNested& other);
    ReflectableNested& operator=(const ReflectableNested& other);

    ReflectableNested(ReflectableNested&& other);
    ReflectableNested& operator=(ReflectableNested&& other);

    ReflectableNested(::zserio::NoInitT,
            const ReflectableNested& other);
    ReflectableNested& assign(::zserio::NoInitT, const ReflectableNested& other);

    ReflectableNested(::zserio::NoInitT, ReflectableNested&& other);
    ReflectableNested& assign(::zserio::NoInitT,
            ReflectableNested&& other);

    ReflectableNested(::zserio::PropagateAllocatorT,
            const ReflectableNested& other, const allocator_type& allocator);
    ReflectableNested(::zserio::PropagateAllocatorT, ::zserio::NoInitT,
            const ReflectableNested& other, const allocator_type& allocator);

    static const ::zserio::ITypeInfo& typeInfo();
    ::zserio::IReflectableConstPtr reflectable(const allocator_type& allocator = allocator_type()) const;
    ::zserio::IReflectablePtr reflectable(const allocator_type& allocator = allocator_type());

    void initialize(
            int32_t dummyParam_,
            ::zserio::string<>& stringParam_);
    bool isInitialized() const;

    int32_t getDummyParam() const;

    ::zserio::string<>& getStringParam();
    const ::zserio::string<>& getStringParam() const;

    uint32_t getValue() const;
    void setValue(uint32_t value_);

    uint32_t funcGetValue() const;

    size_t bitSizeOf(size_t bitPosition = 0) const;

    size_t initializeOffsets(size_t bitPosition = 0);

    bool operator==(const ReflectableNested& other) const;

    bool operator<(const ReflectableNested& other) const;

    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;

private:
    uint32_t readValue(::zserio::BitStreamReader& in);

    int32_t m_dummyParam_;
    ::zserio::string<>* m_stringParam_;
    bool m_isInitialized;
    uint32_t m_value_;
};

} // namespace std_allocator
} // namespace test_object

#endif // TEST_OBJECT_STD_ALLOCATOR_REFLECTABLE_NESTED_H
