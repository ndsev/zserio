/**
 * Automatically generated by Zserio C++ generator version 1.0.2 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode, reflectionCode, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/TypeInfo.h>
#include <zserio/Reflectable.h>

#include <test_object/std_allocator/WalkerUnion.h>

namespace test_object
{
namespace std_allocator
{

WalkerUnion::WalkerUnion(const allocator_type& allocator) noexcept :
        m_choiceTag(UNDEFINED_CHOICE),
        m_objectChoice(allocator)
{
}

WalkerUnion::WalkerUnion(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_choiceTag(readChoiceTag(in)),
        m_objectChoice(readObject(in, allocator))
{
}

WalkerUnion::WalkerUnion(::zserio::PropagateAllocatorT,
        const WalkerUnion& other, const allocator_type& allocator) :
        m_choiceTag(other.m_choiceTag),
        m_objectChoice(::zserio::NoInit, other.copyObject(allocator))
{
}

const ::zserio::ITypeInfo& WalkerUnion::typeInfo()
{
    static const ::zserio::StringView templateName;
    static const ::zserio::Span<::zserio::BasicTemplateArgumentInfo<allocator_type>> templateArguments;

    static const ::std::array<::zserio::BasicFieldInfo<allocator_type>, 3> fields = {
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("value"), // schemaName
            ::zserio::BuiltinTypeInfo<allocator_type>::getUInt32(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("text"), // schemaName
            ::zserio::BuiltinTypeInfo<allocator_type>::getString(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            false, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        },
        ::zserio::BasicFieldInfo<allocator_type>{
            ::zserio::makeStringView("nestedArray"), // schemaName
            ::test_object::std_allocator::WalkerNested::typeInfo(), // typeInfo
            {}, // typeArguments
            false, // isExtended
            {}, // alignment
            {}, // offset
            {}, // initializer
            false, // isOptional
            {}, // optionalClause
            {}, // constraint
            true, // isArray
            {}, // arrayLength
            false, // isPacked
            false // isImplicit
        }
    };

    static const ::zserio::Span<::zserio::BasicParameterInfo<allocator_type>> parameters;

    static const ::zserio::Span<::zserio::BasicFunctionInfo<allocator_type>> functions;

    static const ::zserio::UnionTypeInfo<allocator_type> typeInfo = {
        ::zserio::makeStringView("test_object.std_allocator.WalkerUnion"),
        [](const allocator_type& allocator) -> ::zserio::IReflectablePtr
        {
            return std::allocate_shared<::zserio::ReflectableOwner<WalkerUnion>>(allocator, allocator);
        },
        templateName, templateArguments,
        fields, parameters, functions
    };

    return typeInfo;
}

::zserio::IReflectableConstPtr WalkerUnion::reflectable(const allocator_type& allocator) const
{
    class Reflectable : public ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>
    {
    public:
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getField;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getParameter;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::callFunction;
        using ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>::getAnyValue;

        explicit Reflectable(const ::test_object::std_allocator::WalkerUnion& object, const allocator_type& alloc) :
                ::zserio::ReflectableConstAllocatorHolderBase<allocator_type>(::test_object::std_allocator::WalkerUnion::typeInfo(), alloc),
                m_object(object)
        {}

        size_t bitSizeOf(size_t bitPosition) const override
        {
            return m_object.bitSizeOf(bitPosition);
        }

        void write(::zserio::BitStreamWriter& writer) const override
        {
            m_object.write(writer);
        }

        ::zserio::IReflectableConstPtr getField(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("nestedArray"))
            {
                return ::zserio::ReflectableFactory::getCompoundArray(m_object.getNestedArray(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::zserio::StringView getChoice() const override
        {
            switch (m_object.choiceTag())
            {
            case CHOICE_value:
                return ::zserio::makeStringView("value");
            case CHOICE_text:
                return ::zserio::makeStringView("text");
            case CHOICE_nestedArray:
                return ::zserio::makeStringView("nestedArray");
            default:
                return {};
            }
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) const override
        {
            return ::zserio::AnyHolder<>(::std::cref(m_object), alloc);
        }

    private:
        const ::test_object::std_allocator::WalkerUnion& m_object;
    };

    return std::allocate_shared<Reflectable>(allocator, *this, allocator);
}

::zserio::IReflectablePtr WalkerUnion::reflectable(const allocator_type& allocator)
{
    class Reflectable : public ::zserio::ReflectableAllocatorHolderBase<allocator_type>
    {
    public:
        explicit Reflectable(::test_object::std_allocator::WalkerUnion& object, const allocator_type& alloc) :
                ::zserio::ReflectableAllocatorHolderBase<allocator_type>(::test_object::std_allocator::WalkerUnion::typeInfo(), alloc),
                m_object(object)
        {}

        void initializeChildren() override
        {
        }

        size_t initializeOffsets(size_t bitPosition) override
        {
            return m_object.initializeOffsets(bitPosition);
        }

        size_t bitSizeOf(size_t bitPosition) const override
        {
            return m_object.bitSizeOf(bitPosition);
        }

        void write(::zserio::BitStreamWriter& writer) const override
        {
            m_object.write(writer);
        }

        ::zserio::IReflectableConstPtr getField(::zserio::StringView name) const override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("nestedArray"))
            {
                return ::zserio::ReflectableFactory::getCompoundArray(m_object.getNestedArray(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::zserio::IReflectablePtr getField(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("nestedArray"))
            {
                return ::zserio::ReflectableFactory::getCompoundArray(m_object.getNestedArray(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        void setField(::zserio::StringView name,
                const ::zserio::AnyHolder<allocator_type>& value) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                m_object.setValue(value.get<uint32_t>());
                return;
            }
            if (name == ::zserio::makeStringView("text"))
            {
                m_object.setText(value.get<::zserio::string<>>());
                return;
            }
            if (name == ::zserio::makeStringView("nestedArray"))
            {
                m_object.setNestedArray(value.get<::zserio::vector<::test_object::std_allocator::WalkerNested>>());
                return;
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::zserio::IReflectablePtr createField(::zserio::StringView name) override
        {
            if (name == ::zserio::makeStringView("value"))
            {
                m_object.setValue(uint32_t());
                return ::zserio::ReflectableFactory::getUInt32(m_object.getValue(), get_allocator());
            }
            if (name == ::zserio::makeStringView("text"))
            {
                m_object.setText(::zserio::string<>(get_allocator()));
                return ::zserio::ReflectableFactory::getString(m_object.getText(), get_allocator());
            }
            if (name == ::zserio::makeStringView("nestedArray"))
            {
                m_object.setNestedArray(::zserio::vector<::test_object::std_allocator::WalkerNested>(get_allocator()));
                return ::zserio::ReflectableFactory::getCompoundArray(m_object.getNestedArray(), get_allocator());
            }
            throw ::zserio::CppRuntimeException("Field '") << name << "' doesn't exist in 'WalkerUnion'!";
        }

        ::zserio::StringView getChoice() const override
        {
            switch (m_object.choiceTag())
            {
            case CHOICE_value:
                return ::zserio::makeStringView("value");
            case CHOICE_text:
                return ::zserio::makeStringView("text");
            case CHOICE_nestedArray:
                return ::zserio::makeStringView("nestedArray");
            default:
                return {};
            }
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) const override
        {
            return ::zserio::AnyHolder<>(::std::cref(m_object), alloc);
        }

        ::zserio::AnyHolder<> getAnyValue(const allocator_type& alloc) override
        {
            return ::zserio::AnyHolder<>(::std::ref(m_object), alloc);
        }

    private:
        ::test_object::std_allocator::WalkerUnion& m_object;
    };

    return std::allocate_shared<Reflectable>(allocator, *this, allocator);
}

uint32_t WalkerUnion::getValue() const
{
    return m_objectChoice.get<uint32_t>();
}

void WalkerUnion::setValue(uint32_t value_)
{
    m_choiceTag = CHOICE_value;
    m_objectChoice = value_;
}

::zserio::string<>& WalkerUnion::getText()
{
    return m_objectChoice.get<::zserio::string<>>();
}

const ::zserio::string<>& WalkerUnion::getText() const
{
    return m_objectChoice.get<::zserio::string<>>();
}

void WalkerUnion::setText(const ::zserio::string<>& text_)
{
    m_choiceTag = CHOICE_text;
    m_objectChoice = text_;
}

void WalkerUnion::setText(::zserio::string<>&& text_)
{
    m_choiceTag = CHOICE_text;
    m_objectChoice = ::std::move(text_);
}

::zserio::vector<::test_object::std_allocator::WalkerNested>& WalkerUnion::getNestedArray()
{
    return m_objectChoice.get<ZserioArrayType_nestedArray>().getRawArray();
}

const ::zserio::vector<::test_object::std_allocator::WalkerNested>& WalkerUnion::getNestedArray() const
{
    return m_objectChoice.get<ZserioArrayType_nestedArray>().getRawArray();
}

void WalkerUnion::setNestedArray(const ::zserio::vector<::test_object::std_allocator::WalkerNested>& nestedArray_)
{
    m_choiceTag = CHOICE_nestedArray;
    m_objectChoice = ZserioArrayType_nestedArray(nestedArray_);
}

void WalkerUnion::setNestedArray(::zserio::vector<::test_object::std_allocator::WalkerNested>&& nestedArray_)
{
    m_choiceTag = CHOICE_nestedArray;
    m_objectChoice = ZserioArrayType_nestedArray(std::move(nestedArray_));
}

WalkerUnion::ChoiceTag WalkerUnion::choiceTag() const
{
    return m_choiceTag;
}

size_t WalkerUnion::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(static_cast<uint32_t>(m_choiceTag));

    switch (m_choiceTag)
    {
    case CHOICE_value:
        endBitPosition += UINT8_C(32);
        break;
    case CHOICE_text:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::zserio::string<>>());
        break;
    case CHOICE_nestedArray:
        endBitPosition += m_objectChoice.get<ZserioArrayType_nestedArray>().bitSizeOf(*this, endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in union WalkerUnion!");
    }

    return endBitPosition - bitPosition;
}

size_t WalkerUnion::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += ::zserio::bitSizeOfVarSize(static_cast<uint32_t>(m_choiceTag));

    switch (m_choiceTag)
    {
    case CHOICE_value:
        endBitPosition += UINT8_C(32);
        break;
    case CHOICE_text:
        endBitPosition += ::zserio::bitSizeOfString(m_objectChoice.get<::zserio::string<>>());
        break;
    case CHOICE_nestedArray:
        endBitPosition = m_objectChoice.get<ZserioArrayType_nestedArray>().initializeOffsets(*this, endBitPosition);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in union WalkerUnion!");
    }

    return endBitPosition;
}

bool WalkerUnion::operator==(const WalkerUnion& other) const
{
    if (this == &other)
    {
        return true;
    }

    if (m_choiceTag != other.m_choiceTag)
    {
        return false;
    }

    if (m_objectChoice.hasValue() != other.m_objectChoice.hasValue())
    {
        return false;
    }

    if (!m_objectChoice.hasValue())
    {
        return true;
    }

    switch (m_choiceTag)
    {
    case CHOICE_value:
        return m_objectChoice.get<uint32_t>() == other.m_objectChoice.get<uint32_t>();
    case CHOICE_text:
        return m_objectChoice.get<::zserio::string<>>() == other.m_objectChoice.get<::zserio::string<>>();
    case CHOICE_nestedArray:
        return m_objectChoice.get<ZserioArrayType_nestedArray>() == other.m_objectChoice.get<ZserioArrayType_nestedArray>();
    default:
        return true; // UNDEFINED_CHOICE
    }
}

bool WalkerUnion::operator<(const WalkerUnion& other) const
{
    if (m_choiceTag < other.m_choiceTag)
    {
        return true;
    }
    if (other.m_choiceTag < m_choiceTag)
    {
        return false;
    }

    switch (m_choiceTag)
    {
    case CHOICE_value:
        if (m_objectChoice.hasValue() && other.m_objectChoice.hasValue())
        {
            return m_objectChoice.get<uint32_t>() < other.m_objectChoice.get<uint32_t>();
        }
        else
        {
            return !m_objectChoice.hasValue() && other.m_objectChoice.hasValue();
        }
    case CHOICE_text:
        if (m_objectChoice.hasValue() && other.m_objectChoice.hasValue())
        {
            return m_objectChoice.get<::zserio::string<>>() < other.m_objectChoice.get<::zserio::string<>>();
        }
        else
        {
            return !m_objectChoice.hasValue() && other.m_objectChoice.hasValue();
        }
    case CHOICE_nestedArray:
        if (m_objectChoice.hasValue() && other.m_objectChoice.hasValue())
        {
            return m_objectChoice.get<ZserioArrayType_nestedArray>() < other.m_objectChoice.get<ZserioArrayType_nestedArray>();
        }
        else
        {
            return !m_objectChoice.hasValue() && other.m_objectChoice.hasValue();
        }
    default:
        return false; // UNDEFINED_CHOICE
    }
}

uint32_t WalkerUnion::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, static_cast<int32_t>(m_choiceTag));
    if (m_objectChoice.hasValue())
    {
        switch (m_choiceTag)
        {
        case CHOICE_value:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<uint32_t>());
            break;
        case CHOICE_text:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<::zserio::string<>>());
            break;
        case CHOICE_nestedArray:
            result = ::zserio::calcHashCode(result, m_objectChoice.get<ZserioArrayType_nestedArray>());
            break;
        default:
            // UNDEFINED_CHOICE
            break;
        }
    }

    return result;
}

void WalkerUnion::write(::zserio::BitStreamWriter& out) const
{
    out.writeVarSize(static_cast<uint32_t>(m_choiceTag));

    switch (m_choiceTag)
    {
    case CHOICE_value:
        out.writeBits(m_objectChoice.get<uint32_t>(), UINT8_C(32));
        break;
    case CHOICE_text:
        out.writeString(m_objectChoice.get<::zserio::string<>>());
        break;
    case CHOICE_nestedArray:
        m_objectChoice.get<ZserioArrayType_nestedArray>().write(*this, out);
        break;
    default:
        throw ::zserio::CppRuntimeException("No match in union WalkerUnion!");
    }
}

void WalkerUnion::ZserioElementFactory_nestedArray::create(WalkerUnion&,
        ::zserio::vector<::test_object::std_allocator::WalkerNested>& array,
        ::zserio::BitStreamReader& in, size_t)
{
    array.emplace_back(in, array.get_allocator());
}

WalkerUnion::ChoiceTag WalkerUnion::readChoiceTag(::zserio::BitStreamReader& in)
{
    return static_cast<WalkerUnion::ChoiceTag>(static_cast<int32_t>(in.readVarSize()));
}

::zserio::AnyHolder<> WalkerUnion::readObject(::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    switch (m_choiceTag)
    {
    case CHOICE_value:
        return ::zserio::AnyHolder<>(static_cast<uint32_t>(in.readBits(UINT8_C(32))), allocator);
    case CHOICE_text:
        return ::zserio::AnyHolder<>(static_cast<::zserio::string<>>(in.readString(allocator)), allocator);
    case CHOICE_nestedArray:
        {
            ZserioArrayType_nestedArray readField(allocator);
            readField.read(*this, in);

            return ::zserio::AnyHolder<>(::std::move(readField), allocator);
        }
    default:
        throw ::zserio::CppRuntimeException("No match in union WalkerUnion!");
    }
}

::zserio::AnyHolder<> WalkerUnion::copyObject(const allocator_type& allocator) const
{
    switch (m_choiceTag)
    {
    case CHOICE_value:
        return ::zserio::allocatorPropagatingCopy<uint32_t>(m_objectChoice, allocator);
    case CHOICE_text:
        return ::zserio::allocatorPropagatingCopy<::zserio::string<>>(m_objectChoice, allocator);
    case CHOICE_nestedArray:
        return ::zserio::allocatorPropagatingCopy<ZserioArrayType_nestedArray>(m_objectChoice, allocator);
    default:
        return ::zserio::AnyHolder<>(allocator);
    }
}

} // namespace std_allocator
} // namespace test_object
