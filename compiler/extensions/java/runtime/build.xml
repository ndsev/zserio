<!--

Ant build.xml for Zserio Java runtime library.

The following external properties can be set:

zserio_runtimes.build_dir       - Zserio extensions build directory.
                                  Default is "../../../../build/runtime_libs".
zserio_runtimes.install_dir     - Zserio extensions runtime install directory.
                                  Default is "../../../../distr/runtime_libs"
zserio_java_runtime.build_dir   - Directory where to put generated files.
                                  Default is "${zserio_runtimes.build_dir}/java/${ant.java.version}".
zserio_java_runtime.install_dir - Directory where to install library.
                                  Default is "${zserio_runtimes.install_dir}/java".
relational.enable               - Flag whether the relational extension is included. Default is "yes".
relational.sqlite.jar_file      - SQLite JDBC jar file.
                                  Default is "../../../../3rdparty/java/sqlitejdbc-3.39.4.jar".
relational.validation           - Flag whether the support for low level validation is included.
                                  Default is "yes".
clang_format.exec_file          - Clang-format executable file. If not set, clang-format is not run.
spotbugs.home_dir               - Location of the spotbugs tool. If not set, spotbugs is not run.

-->
<project name="zserio_java_runtime" default="jar" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless"
        xmlns:jacoco="antlib:org.jacoco.ant">
    <dirname property="zserio_java_runtime.base_dir" file="${ant.file.zserio_java_runtime}"/>

    <property name="zserio_java_runtime.zserio_root" location="${zserio_java_runtime.base_dir}/../../../.."/>

    <property name="zserio_runtimes.build_dir" value="${zserio_java_runtime.zserio_root}/build/runtime_libs"/>
    <property name="zserio_runtimes.install_dir" value="${zserio_java_runtime.zserio_root}/distr/runtime_libs"/>
    <property name="zserio_java_runtime.build_dir"
            value="${zserio_runtimes.build_dir}/java/${ant.java.version}"/>
    <property name="zserio_java_runtime.install_dir" value="${zserio_runtimes.install_dir}/java"/>
    <property name="relational.enable" value="yes"/>
    <property name="relational.sqlite.jar_file"
            value="${zserio_java_runtime.zserio_root}/3rdparty/java/sqlitejdbc-3.39.4.jar"/>
    <property name="relational.validation" value="yes"/>

    <property name="zserio_java_runtime.src_dir" location="${zserio_java_runtime.base_dir}/src"/>
    <property name="zserio_java_runtime.classes_dir" value="${zserio_java_runtime.build_dir}/classes"/>
    <property name="zserio_java_runtime.javadocs_dir" value="${zserio_java_runtime.build_dir}/javadocs"/>
    <property name="zserio_java_runtime.spotbugs.out_dir" value="${zserio_java_runtime.build_dir}/spotbugs"/>

    <property name="zserio_java_runtime.test.src_dir" location="${zserio_java_runtime.base_dir}/test"/>
    <property name="zserio_java_runtime.test.src_test_object_subdir"
            value="test_object"/>
    <property name="zserio_java_runtime.test.build_dir" value="${zserio_java_runtime.build_dir}/test"/>
    <property name="zserio_java_runtime.test.classes_dir"
            value="${zserio_java_runtime.test.build_dir}/classes"/>
    <property name="zserio_java_runtime.test.spotbugs.out_dir"
            value="${zserio_java_runtime.test.build_dir}/spotbugs"/>
    <property name="zserio_java_runtime.test.results_dir"
            value="${zserio_java_runtime.test.build_dir}/results"/>
    <property name="zserio_java_runtime.test.coverage_dir"
            value="${zserio_java_runtime.test.build_dir}/coverage"/>
    <property name="zserio_java_runtime.test.coverage_file"
            value="${zserio_java_runtime.test.coverage_dir}/jacoco_coverage.bin"/>
    <property name="zserio_java_runtime.test.coverage_html_dir"
            value="${zserio_java_runtime.javadocs_dir}/coverage"/>

    <property name="zserio_java_runtime.jar_dir" value="${zserio_java_runtime.build_dir}/jar"/>
    <property name="zserio_java_runtime.jar_file" value="${zserio_java_runtime.jar_dir}/zserio_runtime.jar"/>
    <property name="zserio_java_runtime.javadocs_jar_file"
            value="${zserio_java_runtime.jar_dir}/zserio_runtime_javadocs.jar"/>
    <property name="zserio_java_runtime.sources_jar_file"
            value="${zserio_java_runtime.jar_dir}/zserio_runtime_sources.jar"/>

    <property name="zserio_java_runtime.3rdparty.root_dir" value="${zserio_java_runtime.zserio_root}/3rdparty"/>
    <property name="zserio_java_runtime.3rdparty.jar_dir"
            value="${zserio_java_runtime.3rdparty.root_dir}/java"/>
    <property name="zserio_java_runtime.3rdparty.junit.jar_file"
            location="${zserio_java_runtime.3rdparty.jar_dir}/junit-platform-console-standalone-1.8.2.jar"/>

    <!-- check Ant version, minimum is 1.9.1 due to xmlns:if and xmlns:unless -->
    <fail message="[ERROR] Ant 1.9.1+ required! Current ant is ${ant.version}.">
        <condition>
            <not><antversion atleast="1.9.1"/></not>
        </condition>
    </fail>

    <!-- Zserio Java extension runtime version. -->
    <loadfile
        encoding="UTF-8"
        property="zserio_java_runtime.version"
        srcFile="${basedir}/src/zserio/runtime/JavaRuntimeVersion.java">
        <filterchain>
            <striplinebreaks/>
            <tokenfilter>
                <replaceregex
                    pattern='.*JAVA_EXTENSION_RUNTIME_VERSION_STRING\s*=\s*"([0-9]+.[0-9]+.[0-9]+(-[A-Za-z0-9]+)?)".*'
                    replace="\1"/>
            </tokenfilter>
        </filterchain>
    </loadfile>

    <!-- Zserio version. -->
    <loadfile
        encoding="UTF-8"
        property="zserio_core.version"
        srcFile="${basedir}/../src/zserio/extension/java/JavaExtensionVersion.java">
        <filterchain>
            <striplinebreaks/>
            <tokenfilter>
                <replaceregex
                    pattern='.*EXPECTED_ZSERIO_VERSION_STRING\s*=\s*"([0-9]+.[0-9]+.[0-9]+(-[A-Za-z0-9]+)?)".*'
                    replace="\1"/>
            </tokenfilter>
        </filterchain>
    </loadfile>

    <condition property="relational.enabled" value="true">
        <istrue value="${relational.enable}"/>
    </condition>

    <condition property="relational.validation_enabled" value="true">
        <and>
            <istrue value="${relational.enable}"/>
            <istrue value="${relational.validation}"/>
        </and>
    </condition>

    <uptodate property="zserio_java_runtime.javadocs_up_to_date">
        <srcfiles dir= "${zserio_java_runtime.src_dir}" includes="**/*"/>
        <srcfiles file="build.xml"/>
        <mapper type="merge" to="${zserio_java_runtime.javadocs_dir}/index.html"/>
    </uptodate>

    <target name="clean" depends="test.clean">
        <delete dir="${zserio_java_runtime.build_dir}"/>
    </target>

    <patternset id="zserio_java_runtime.sources_patterns">
        <include name="**/*.java"/>
        <exclude name="zserio/runtime/SqlDatabase*.java" unless="relational.enabled"/>
        <exclude name="zserio/runtime/validation/*.java" unless="relational.validation_enabled"/>
    </patternset>

    <fileset id="zserio_java_runtime.sources" dir="${zserio_java_runtime.src_dir}">
        <patternset refid="zserio_java_runtime.sources_patterns"/>
    </fileset>

    <target name="compile">
        <mkdir dir="${zserio_java_runtime.classes_dir}"/>
        <depend srcDir="${zserio_java_runtime.src_dir}" destDir="${zserio_java_runtime.classes_dir}"
                cache="${zserio_java_runtime.build_dir}/depend-cache"/>
        <javac destdir="${zserio_java_runtime.classes_dir}" debug="on" encoding="utf8"
                includeAntRuntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Xdoclint:all/public"/>
            <compilerarg value="-Werror"/>
            <src path="${zserio_java_runtime.src_dir}"/>
            <patternset refid="zserio_java_runtime.sources_patterns"/>
        </javac>
    </target>

    <target name="javadocs" unless="zserio_java_runtime.javadocs_up_to_date">
        <tstamp>
            <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>
        <javadoc packagenames="zserio.runtime.*" destdir="${zserio_java_runtime.javadocs_dir}"
                failonerror="true" failonwarning="true"
                Overview="${zserio_java_runtime.src_dir}/zserio/runtime/overview.html">
            <fileset refid="zserio_java_runtime.sources"/>
            <doctitle>
                <![CDATA[<h1>Zserio Java Runtime Library Documentation ${zserio_java_runtime.version}</h1>
                    <h2>Built for Zserio ${zserio_core.version}</h2>]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Last updated ${timestamp}</i>]]>
            </bottom>
        </javadoc>
    </target>

    <target name="jar" depends="compile, javadocs">
        <jar destfile="${zserio_java_runtime.jar_file}">
            <fileset dir="${zserio_java_runtime.classes_dir}">
                <include name="zserio/runtime/**"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${zserio_java_runtime.version}"/>
            </manifest>
        </jar>

        <jar destfile="${zserio_java_runtime.javadocs_jar_file}">
            <fileset dir="${zserio_java_runtime.javadocs_dir}">
                <include name="**"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${zserio_java_runtime.version}"/>
            </manifest>
        </jar>

        <jar destfile="${zserio_java_runtime.sources_jar_file}">
            <fileset refid="zserio_java_runtime.sources"/>
            <manifest>
                <attribute name="Implementation-Version" value="${zserio_java_runtime.version}"/>
            </manifest>
        </jar>
    </target>

    <target name="install" depends="jar">
        <mkdir dir="${zserio_java_runtime.install_dir}"/>
        <copy file="${zserio_java_runtime.jar_file}" todir="${zserio_java_runtime.install_dir}"
               overwrite="true"/>
        <copy file="${zserio_java_runtime.javadocs_jar_file}" todir="${zserio_java_runtime.install_dir}"
               overwrite="true"/>
        <copy file="${zserio_java_runtime.sources_jar_file}" todir="${zserio_java_runtime.install_dir}"
               overwrite="true"/>
    </target>

    <target name="clang_format" depends="install" if="clang_format.exec_file">
        <echo>
Command hints to reformat source manually using clang-format tool (in case of format errors):
    git clang-format
    clang-format --style=file -i [SOURCE]
        </echo>
        <apply executable="${clang_format.exec_file}" failonerror="true">
            <arg value="--style=file"/>
            <arg value="--dry-run"/>
            <arg value="--Werror"/>
            <srcfile/>
            <fileset dir="${zserio_java_runtime.src_dir}" includes="**/*.java"/>
        </apply>
    </target>

    <target name="spotbugs" depends="clang_format" if="spotbugs.home_dir">
        <mkdir dir="${zserio_java_runtime.spotbugs.out_dir}"/>
        <taskdef classpath="${spotbugs.home_dir}/lib/spotbugs-ant.jar"
            resource="edu/umd/cs/findbugs/anttask/tasks.properties"/>
        <spotbugs home="${spotbugs.home_dir}"
            output="html"
            outputFile="${zserio_java_runtime.spotbugs.out_dir}/spotbugs.html"
            excludeFilter="${zserio_java_runtime.base_dir}/spotbugs_filter.xml"
            reportLevel="low"
            errorProperty="zserio_java_runtime.spotbugs.is_failed"
            warningsProperty="zserio_java_runtime.spotbugs.is_failed">
            <sourcePath>
                <dirset dir="${zserio_java_runtime.base_dir}">
                    <include name="src"/>
                </dirset>
            </sourcePath>
            <fileset dir="${zserio_java_runtime.classes_dir}"/>
            <auxClasspath>
                <fileset file="${zserio_java_runtime.3rdparty.junit.jar_file}"/>
            </auxClasspath>
        </spotbugs>
        <fail message="SpotBugs found some issues!" if="zserio_java_runtime.spotbugs.is_failed"/>
    </target>

    <target name="test.clean">
        <delete dir="${zserio_java_runtime.test.build_dir}"/>
    </target>

    <target name="test.compile" depends="jar">
        <mkdir dir="${zserio_java_runtime.test.classes_dir}"/>
        <depend srcDir="${zserio_java_runtime.test.src_dir}" destDir="${zserio_java_runtime.test.classes_dir}"
                cache="${zserio_java_runtime.test.build_dir}/depend-cache"/>
        <javac srcdir="${zserio_java_runtime.test.src_dir}/${zserio_java_runtime.test.src_test_object_subdir}"
                destdir="${zserio_java_runtime.test.classes_dir}" debug="on" encoding="utf8"
                includeAntRuntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Xlint:-cast"/>
            <compilerarg value="-Werror"/>
            <classpath>
                <pathelement path="${zserio_java_runtime.jar_file}"/>
            </classpath>
        </javac>
        <javac srcdir="${zserio_java_runtime.test.src_dir}" destdir="${zserio_java_runtime.test.classes_dir}"
                debug="on" encoding="utf8" includeAntRuntime="false">
            <compilerarg value="-Xlint:all"/>
            <compilerarg value="-Werror"/>
            <exclude name="zserio/runtime/validation/*.java"
                    unless="relational.validation_enabled"/>
            <classpath>
                <pathelement path="${zserio_java_runtime.3rdparty.junit.jar_file}"/>
                <pathelement path="${zserio_java_runtime.jar_file}"/>
            </classpath>
        </javac>
    </target>

    <target name="test.clang_format" depends="spotbugs, test.compile" if="clang_format.exec_file">
        <echo>
Command hints to reformat source manually using clang-format tool (in case of format errors):
    git clang-format
    clang-format --style=file -i [SOURCE]
        </echo>
        <apply executable="${clang_format.exec_file}" failonerror="true">
            <arg value="--style=file"/>
            <arg value="--dry-run"/>
            <arg value="--Werror"/>
            <srcfile/>
            <fileset dir="${zserio_java_runtime.test.src_dir}" includes="**/*.java"
                    excludes="test_object/*.java"/>
        </apply>
    </target>

    <target name="test.spotbugs" depends="test.clang_format" if="spotbugs.home_dir">
        <mkdir dir="${zserio_java_runtime.test.spotbugs.out_dir}"/>
        <taskdef classpath="${spotbugs.home_dir}/lib/spotbugs-ant.jar"
            resource="edu/umd/cs/findbugs/anttask/tasks.properties"/>
        <spotbugs home="${spotbugs.home_dir}"
                output="html"
                outputFile="${zserio_java_runtime.test.spotbugs.out_dir}/spotbugs.html"
                excludeFilter="${zserio_java_runtime.base_dir}/spotbugs_filter.xml"
                reportLevel="low"
                errorProperty="zserio_java_runtime.spotbugs.is_failed"
                warningsProperty="zserio_java_runtime.spotbugs.is_failed">
            <sourcePath>
                <dirset dir="${zserio_java_runtime.test.src_dir}"/>
            </sourcePath>
            <fileset dir="${zserio_java_runtime.test.classes_dir}"/>
            <auxClasspath>
                <fileset file="${zserio_java_runtime.3rdparty.junit.jar_file}"/>
                <fileset file="${zserio_java_runtime.jar_file}"/>
            </auxClasspath>
        </spotbugs>
        <fail message="SpotBugs found some issues!" if="zserio_java_runtime.spotbugs.is_failed"/>
    </target>

    <target name="test.run" depends="test.spotbugs">
        <mkdir dir="${zserio_java_runtime.test.results_dir}"/>
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml"
                classpath="${zserio_java_runtime.3rdparty.jar_dir}/jacocoant-0.8.8.jar"/>
        <jacoco:coverage destfile="${zserio_java_runtime.test.coverage_file}" append="false"
                excludes="*${zserio_java_runtime.test.src_test_object_subdir}*">
            <java classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="true"
                    dir="${zserio_java_runtime.test.build_dir}">
                <classpath>
                    <pathelement path="${zserio_java_runtime.3rdparty.junit.jar_file}"/>
                    <pathelement path="${zserio_java_runtime.jar_file}"/>
                    <pathelement path="${zserio_java_runtime.test.classes_dir}"/>
                    <pathelement path="${relational.sqlite.jar_file}"
                            if:true="${relational.validation_enabled}"/>
                </classpath>
                <arg line="--disable-banner"/>
                <arg line="--scan-classpath"/>
                <arg line="--exclude-package zserio.runtime.validation"
                        unless:true="${relational.validation_enabled}"/>
                <arg line="--fail-if-no-tests"/>
                <arg line="--details tree"/>
                <arg line="--exclude-engine junit-vintage"/>
                <arg line="--reports-dir ${zserio_java_runtime.test.results_dir}"/>
                <jvmarg line="-Xmx16g"/> <!-- for ByteArrayBitStreamTest -->
            </java>
        </jacoco:coverage>

        <jacoco:report>
            <executiondata>
                <file file="${zserio_java_runtime.test.coverage_file}"/>
            </executiondata>

            <structure name="Zserio Java Runtime Library">
                <classfiles>
                    <fileset dir="${zserio_java_runtime.classes_dir}"/>
                    <fileset dir="${zserio_java_runtime.test.classes_dir}">
                        <exclude name="${zserio_java_runtime.test.src_test_object_subdir}/**/*.class"/>
                    </fileset>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${zserio_java_runtime.src_dir}"/>
                    <fileset dir="${zserio_java_runtime.test.src_dir}"/>
                </sourcefiles>
            </structure>

            <html destdir="${zserio_java_runtime.test.coverage_html_dir}"/>
            <xml destfile="${zserio_java_runtime.test.coverage_html_dir}/jacoco_report.xml"/>

            <check>
                <rule element="BUNDLE">
                    <limit counter="INSTRUCTION" value="COVEREDRATIO" minimum="92%"/>
                </rule>
            </check>
        </jacoco:report>

        <jar destfile="${zserio_java_runtime.javadocs_jar_file}" update="true">
            <fileset dir="${zserio_java_runtime.javadocs_dir}">
                <include name="**"/>
            </fileset>
        </jar>
        <copy file="${zserio_java_runtime.javadocs_jar_file}" todir="${zserio_java_runtime.install_dir}"
               overwrite="true"/>
    </target>

    <target name="test" depends="test.run">
    </target>
</project>
