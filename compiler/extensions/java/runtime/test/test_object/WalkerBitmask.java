/**
 * Automatically generated by Zserio Java generator version 1.1.1 using Zserio core 2.14.1.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode.
 */

package test_object;

public final class WalkerBitmask implements zserio.runtime.io.Writer, zserio.runtime.SizeOf,
        zserio.runtime.ZserioBitmask
{
    public WalkerBitmask()
    {
        this((long)0);
    }

    public WalkerBitmask(long value)
    {
        if (value < 0L || value > 4294967295L)
        {
            throw new java.lang.IllegalArgumentException(
                    "Value for bitmask 'WalkerBitmask' out of bounds: " + value + "!");
        }
        this.value = value;
    }

    public WalkerBitmask(zserio.runtime.io.BitStreamReader in) throws java.io.IOException
    {
        value = in.readUnsignedInt();
    }

    public static zserio.runtime.typeinfo.TypeInfo typeInfo()
    {
        return new zserio.runtime.typeinfo.TypeInfo.BitmaskTypeInfo(
                "test_object.WalkerBitmask",
                WalkerBitmask.class,
                zserio.runtime.typeinfo.TypeInfo.BuiltinTypeInfo.getUInt32(),
                new java.util.ArrayList<java.util.function.Supplier<java.lang.Object>>(),
                java.util.Arrays.asList(
                        new zserio.runtime.typeinfo.ItemInfo("ZERO", java.math.BigInteger.valueOf(1L), false, false)
                )
        );
    }

    @Override
    public int bitSizeOf()
    {
        return bitSizeOf(0);
    }

    @Override
    public int bitSizeOf(long bitPosition)
    {
        return 32;
    }

    @Override
    public long initializeOffsets()
    {
        return initializeOffsets(0);
    }

    @Override
    public long initializeOffsets(long bitPosition)
    {
        return bitPosition + bitSizeOf(bitPosition);
    }

    @Override
    public boolean equals(java.lang.Object other)
    {
        if (!(other instanceof WalkerBitmask))
            return false;

        final WalkerBitmask otherWalkerBitmask = (WalkerBitmask)other;
        return value == otherWalkerBitmask.value;
    }

    @Override
    public int hashCode()
    {
        int result = zserio.runtime.HashCodeUtil.HASH_SEED;
        result = zserio.runtime.HashCodeUtil.calcHashCode(result, value);
        return result;
    }

    @Override
    public java.lang.String toString()
    {
        final java.lang.StringBuilder builder = new java.lang.StringBuilder();

        if (this.and(WalkerBitmask.Values.ZERO).equals(WalkerBitmask.Values.ZERO))
            builder.append(builder.length() == 0 ? "ZERO" : " | ZERO");

        return java.lang.String.valueOf(value) + "[" + builder.toString() + "]";
    }

    @Override
    public void write(zserio.runtime.io.BitStreamWriter out) throws java.io.IOException
    {
        out.writeUnsignedInt(value);
    }

    public long getValue()
    {
        return value;
    }

    @Override
    public java.lang.Number getGenericValue()
    {
        return value;
    }

    public WalkerBitmask or(WalkerBitmask other)
    {
        return new WalkerBitmask((long)(value | other.value));
    }

    public WalkerBitmask and(WalkerBitmask other)
    {
        return new WalkerBitmask((long)(value & other.value));
    }

    public WalkerBitmask xor(WalkerBitmask other)
    {
        return new WalkerBitmask((long)(value ^ other.value));
    }

    public WalkerBitmask not()
    {
        return new WalkerBitmask((long)(~value & 4294967295L));
    }

    public static final class Values
    {
        public static final WalkerBitmask ZERO = new WalkerBitmask(1L);
    }

    private long value;
}
