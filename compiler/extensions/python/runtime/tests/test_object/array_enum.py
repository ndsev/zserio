# Automatically generated by Zserio Python generator version 1.0.2 using Zserio core 2.14.1.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode

from __future__ import annotations

import typing
import zserio


class ArrayEnum(zserio.Enum):
    VALUE1 = 0
    VALUE2 = 1
    VALUE3 = 2

    @classmethod
    def from_name(cls: typing.Type["ArrayEnum"], item_name: str) -> "ArrayEnum":
        if item_name == "VALUE1":
            item = ArrayEnum.VALUE1
        elif item_name == "VALUE2":
            item = ArrayEnum.VALUE2
        elif item_name == "VALUE3":
            item = ArrayEnum.VALUE3
        else:
            raise zserio.PythonRuntimeException(f"Enum item '{item_name}' doesn't exist in enum 'ArrayEnum'!")

        return item

    @classmethod
    def from_reader(cls: typing.Type["ArrayEnum"], reader: zserio.BitStreamReader) -> "ArrayEnum":
        return cls(reader.read_signed_bits(8))

    @classmethod
    def from_reader_packed(
        cls: typing.Type["ArrayEnum"],
        delta_context: zserio.array.DeltaContext,
        reader: zserio.BitStreamReader,
    ) -> "ArrayEnum":
        return cls(delta_context.read(zserio.array.SignedBitFieldArrayTraits(8), reader))

    @staticmethod
    def type_info():
        attribute_list = {
            zserio.typeinfo.TypeAttribute.UNDERLYING_TYPE: zserio.typeinfo.TypeInfo("int8", int),
            zserio.typeinfo.TypeAttribute.ENUM_ITEMS: [
                zserio.typeinfo.ItemInfo("VALUE1", ArrayEnum.VALUE1, False, False),
                zserio.typeinfo.ItemInfo("VALUE2", ArrayEnum.VALUE2, False, False),
                zserio.typeinfo.ItemInfo("VALUE3", ArrayEnum.VALUE3, False, False),
            ],
        }

        return zserio.typeinfo.TypeInfo("test_object.ArrayEnum", ArrayEnum, attributes=attribute_list)

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self.value)
        return result

    @staticmethod
    def create_packing_context() -> zserio.array.DeltaContext:
        return zserio.array.DeltaContext()

    def init_packing_context(self, delta_context: zserio.array.DeltaContext) -> None:
        delta_context.init(zserio.array.SignedBitFieldArrayTraits(8), self.value)

    def bitsizeof(self, _bitposition: int = 0) -> int:
        return 8

    def bitsizeof_packed(self, delta_context: zserio.array.DeltaContext, _bitposition: int) -> int:
        return delta_context.bitsizeof(zserio.array.SignedBitFieldArrayTraits(8), self.value)

    def initialize_offsets(self, bitposition: int = 0) -> int:
        return bitposition + self.bitsizeof(bitposition)

    def initialize_offsets_packed(self, delta_context: zserio.array.DeltaContext, bitposition: int) -> int:
        return bitposition + self.bitsizeof_packed(delta_context, bitposition)

    def write(self, writer: zserio.BitStreamWriter) -> None:
        writer.write_signed_bits(self.value, 8)

    def write_packed(self, delta_context: zserio.array.DeltaContext, writer: zserio.BitStreamWriter) -> None:
        delta_context.write(zserio.array.SignedBitFieldArrayTraits(8), writer, self.value)
