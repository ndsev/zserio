# Automatically generated by Zserio Python generator version 1.0.2 using Zserio core 2.14.1.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode

from __future__ import annotations

import typing
import zserio

import test_object.array_bitmask
import test_object.array_enum
import test_object.array_object


class ArrayHolder:
    def __init__(
        self,
        enum_array_: typing.List[test_object.array_enum.ArrayEnum] = None,
        bitmask_array_: typing.List[test_object.array_bitmask.ArrayBitmask] = None,
        packed_array_: typing.List[test_object.array_object.ArrayObject] = None,
    ) -> None:
        self._enum_array_ = zserio.array.Array(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_enum_array()),
            enum_array_,
            is_auto=True,
        )
        self._bitmask_array_ = zserio.array.Array(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_bitmask_array()),
            bitmask_array_,
            is_auto=True,
        )
        self._packed_array_ = zserio.array.Array(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_packed_array()),
            packed_array_,
            is_auto=True,
        )

    @classmethod
    def from_reader(cls: typing.Type["ArrayHolder"], zserio_reader: zserio.BitStreamReader) -> "ArrayHolder":
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @staticmethod
    def type_info() -> zserio.typeinfo.TypeInfo:
        field_list: typing.List[zserio.typeinfo.MemberInfo] = [
            zserio.typeinfo.MemberInfo(
                "enumArray",
                test_object.array_enum.ArrayEnum.type_info(),
                attributes={
                    zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "enum_array",
                    zserio.typeinfo.MemberAttribute.ARRAY_LENGTH: None,
                    zserio.typeinfo.MemberAttribute.PACKED: None,
                },
            ),
            zserio.typeinfo.MemberInfo(
                "bitmaskArray",
                test_object.array_bitmask.ArrayBitmask.type_info(),
                attributes={
                    zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "bitmask_array",
                    zserio.typeinfo.MemberAttribute.ARRAY_LENGTH: None,
                    zserio.typeinfo.MemberAttribute.PACKED: None,
                },
            ),
            zserio.typeinfo.MemberInfo(
                "packedArray",
                test_object.array_object.ArrayObject.type_info(),
                attributes={
                    zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "packed_array",
                    zserio.typeinfo.MemberAttribute.ARRAY_LENGTH: None,
                    zserio.typeinfo.MemberAttribute.PACKED: None,
                },
            ),
        ]
        attribute_list = {zserio.typeinfo.TypeAttribute.FIELDS: field_list}

        return zserio.typeinfo.TypeInfo("test_object.ArrayHolder", ArrayHolder, attributes=attribute_list)

    def __eq__(self, other: object) -> bool:
        if isinstance(other, ArrayHolder):
            return (
                (self._enum_array_ == other._enum_array_)
                and (self._bitmask_array_ == other._bitmask_array_)
                and (self._packed_array_ == other._packed_array_)
            )

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_object(result, self._enum_array_)
        result = zserio.hashcode.calc_hashcode_object(result, self._bitmask_array_)
        result = zserio.hashcode.calc_hashcode_object(result, self._packed_array_)

        return result

    @property
    def enum_array(self) -> typing.List[test_object.array_enum.ArrayEnum]:
        return self._enum_array_.raw_array

    @enum_array.setter
    def enum_array(self, enum_array_: typing.List[test_object.array_enum.ArrayEnum]) -> None:
        self._enum_array_ = zserio.array.Array(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_enum_array()),
            enum_array_,
            is_auto=True,
        )

    @property
    def bitmask_array(self) -> typing.List[test_object.array_bitmask.ArrayBitmask]:
        return self._bitmask_array_.raw_array

    @bitmask_array.setter
    def bitmask_array(self, bitmask_array_: typing.List[test_object.array_bitmask.ArrayBitmask]) -> None:
        self._bitmask_array_ = zserio.array.Array(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_bitmask_array()),
            bitmask_array_,
            is_auto=True,
        )

    @property
    def packed_array(self) -> typing.List[test_object.array_object.ArrayObject]:
        return self._packed_array_.raw_array

    @packed_array.setter
    def packed_array(self, packed_array_: typing.List[test_object.array_object.ArrayObject]) -> None:
        self._packed_array_ = zserio.array.Array(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_packed_array()),
            packed_array_,
            is_auto=True,
        )

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += self._enum_array_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._bitmask_array_.bitsizeof_packed(end_bitposition)
        end_bitposition += self._packed_array_.bitsizeof_packed(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition = self._enum_array_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._bitmask_array_.initialize_offsets_packed(end_bitposition)
        end_bitposition = self._packed_array_.initialize_offsets_packed(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._enum_array_ = zserio.array.Array.from_reader_packed(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_enum_array()),
            zserio_reader,
            is_auto=True,
        )
        self._bitmask_array_ = zserio.array.Array.from_reader_packed(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_bitmask_array()),
            zserio_reader,
            is_auto=True,
        )
        self._packed_array_ = zserio.array.Array.from_reader_packed(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_packed_array()),
            zserio_reader,
            is_auto=True,
        )

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        self._enum_array_.write_packed(zserio_writer)
        self._bitmask_array_.write_packed(zserio_writer)
        self._packed_array_.write_packed(zserio_writer)

    class _ZserioElementFactory_enum_array:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(
            zserio_reader: zserio.BitStreamReader, zserio_index: int
        ) -> test_object.array_enum.ArrayEnum:
            del zserio_index
            return test_object.array_enum.ArrayEnum.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(
            zserio_context: zserio.array.DeltaContext,
            zserio_reader: zserio.BitStreamReader,
            zserio_index: int,
        ) -> test_object.array_enum.ArrayEnum:
            del zserio_index
            return test_object.array_enum.ArrayEnum.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_bitmask_array:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(
            zserio_reader: zserio.BitStreamReader, zserio_index: int
        ) -> test_object.array_bitmask.ArrayBitmask:
            del zserio_index
            return test_object.array_bitmask.ArrayBitmask.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> zserio.array.DeltaContext:
            return zserio.array.DeltaContext()

        @staticmethod
        def create_packed(
            zserio_context: zserio.array.DeltaContext,
            zserio_reader: zserio.BitStreamReader,
            zserio_index: int,
        ) -> test_object.array_bitmask.ArrayBitmask:
            del zserio_index
            return test_object.array_bitmask.ArrayBitmask.from_reader_packed(zserio_context, zserio_reader)

    class _ZserioElementFactory_packed_array:
        IS_OBJECT_PACKABLE = True

        @staticmethod
        def create(
            zserio_reader: zserio.BitStreamReader, zserio_index: int
        ) -> test_object.array_object.ArrayObject:
            del zserio_index
            return test_object.array_object.ArrayObject.from_reader(zserio_reader)

        @staticmethod
        def create_packing_context() -> test_object.array_object.ArrayObject.ZserioPackingContext:
            return test_object.array_object.ArrayObject.ZserioPackingContext()

        @staticmethod
        def create_packed(
            zserio_context: test_object.array_object.ArrayObject.ZserioPackingContext,
            zserio_reader: zserio.BitStreamReader,
            zserio_index: int,
        ) -> test_object.array_object.ArrayObject:
            del zserio_index
            return test_object.array_object.ArrayObject.from_reader_packed(zserio_context, zserio_reader)
