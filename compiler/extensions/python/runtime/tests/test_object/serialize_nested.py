# Automatically generated by Zserio Python generator version 1.0.2 using Zserio core 2.14.1.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode

from __future__ import annotations

import typing
import zserio


class SerializeNested:
    def __init__(
        self,
        param_: int,
        offset_: int = int(),
        optional_value_: typing.Optional[int] = None,
    ) -> None:
        self._param_ = param_
        self._offset_ = offset_
        self._optional_value_ = optional_value_

    @classmethod
    def from_reader(
        cls: typing.Type["SerializeNested"],
        zserio_reader: zserio.BitStreamReader,
        param_: int,
    ) -> "SerializeNested":
        self = object.__new__(cls)
        self._param_ = param_

        self.read(zserio_reader)

        return self

    @staticmethod
    def type_info() -> zserio.typeinfo.TypeInfo:
        field_list: typing.List[zserio.typeinfo.MemberInfo] = [
            zserio.typeinfo.MemberInfo(
                "offset",
                zserio.typeinfo.TypeInfo("uint8", int),
                attributes={zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "offset"},
            ),
            zserio.typeinfo.MemberInfo(
                "optionalValue",
                zserio.typeinfo.TypeInfo("uint32", int),
                attributes={
                    zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "optional_value",
                    zserio.typeinfo.MemberAttribute.OFFSET: (lambda self, zserio_index: self._offset_),
                    zserio.typeinfo.MemberAttribute.OPTIONAL: (lambda self: self._param_ >= 0),
                    zserio.typeinfo.MemberAttribute.IS_USED_INDICATOR_NAME: "is_optional_value_used",
                    zserio.typeinfo.MemberAttribute.IS_SET_INDICATOR_NAME: "is_optional_value_set",
                },
            ),
        ]
        parameter_list: typing.List[zserio.typeinfo.MemberInfo] = [
            zserio.typeinfo.MemberInfo(
                "param",
                zserio.typeinfo.TypeInfo("int8", int),
                attributes={zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "param"},
            )
        ]
        attribute_list = {
            zserio.typeinfo.TypeAttribute.FIELDS: field_list,
            zserio.typeinfo.TypeAttribute.PARAMETERS: parameter_list,
        }

        return zserio.typeinfo.TypeInfo(
            "test_object.SerializeNested", SerializeNested, attributes=attribute_list
        )

    def __eq__(self, other: object) -> bool:
        if isinstance(other, SerializeNested):
            return (
                self._param_ == other._param_
                and (self._offset_ == other._offset_)
                and (
                    not other.is_optional_value_used()
                    if not self.is_optional_value_used()
                    else (self._optional_value_ == other._optional_value_)
                )
            )

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._param_)
        result = zserio.hashcode.calc_hashcode_int32(result, self._offset_)
        if self.is_optional_value_used():
            result = zserio.hashcode.calc_hashcode_int32(result, self._optional_value_)

        return result

    @property
    def param(self) -> int:
        return self._param_

    @property
    def offset(self) -> int:
        return self._offset_

    @offset.setter
    def offset(self, offset_: int) -> None:
        self._offset_ = offset_

    @property
    def optional_value(self) -> typing.Optional[int]:
        return self._optional_value_

    @optional_value.setter
    def optional_value(self, optional_value_: typing.Optional[int]) -> None:
        self._optional_value_ = optional_value_

    def is_optional_value_used(self) -> bool:
        return self._param_ >= 0

    def is_optional_value_set(self) -> bool:
        return not self._optional_value_ is None

    def reset_optional_value(self) -> None:
        self._optional_value_ = None

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        if self.is_optional_value_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            end_bitposition += 32

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 8
        if self.is_optional_value_used():
            end_bitposition = zserio.bitposition.alignto(8, end_bitposition)
            # initialize offset
            value = zserio.bitposition.bits_to_bytes(end_bitposition)
            self.offset = value
            end_bitposition += 32

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._offset_ = zserio_reader.read_bits(8)

        if self.is_optional_value_used():
            zserio_reader.alignto(8)
            # check offset
            if zserio_reader.bitposition != zserio.bitposition.bytes_to_bits(self._offset_):
                raise zserio.PythonRuntimeException(
                    "Wrong offset for field SerializeNested.optionalValue: "
                    f"{zserio_reader.bitposition} != {zserio.bitposition.bytes_to_bits(self._offset_)}!"
                )
            self._optional_value_ = zserio_reader.read_bits(32)
        else:
            self._optional_value_ = None

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._offset_, 8)

        if self.is_optional_value_used():
            zserio_writer.alignto(8)
            # check offset
            if zserio_writer.bitposition != zserio.bitposition.bytes_to_bits(self._offset_):
                raise zserio.PythonRuntimeException(
                    "Wrong offset for field SerializeNested.optionalValue: "
                    f"{zserio_writer.bitposition} != {zserio.bitposition.bytes_to_bits(self._offset_)}!"
                )
            zserio_writer.write_bits(self._optional_value_, 32)
