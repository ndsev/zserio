# Automatically generated by Zserio Python generator version 1.0.2 using Zserio core 2.14.1.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, typeInfoCode

from __future__ import annotations

import typing
import zserio

import test_object.walker_nested


class WalkerUnion:
    def __init__(
        self,
        *,
        value_: typing.Union[int, None] = None,
        text_: typing.Union[str, None] = None,
        nested_array_: typing.Union[typing.List[test_object.walker_nested.WalkerNested], None] = None,
    ) -> None:
        self._choice_tag: int = self.UNDEFINED_CHOICE
        self._choice: typing.Any = None
        if value_ is not None:
            self._choice_tag = self.CHOICE_VALUE
            self._choice = value_
        if text_ is not None:
            if self._choice_tag != self.UNDEFINED_CHOICE:
                raise zserio.PythonRuntimeException("Calling constructor of union WalkerUnion is ambiguous!")
            self._choice_tag = self.CHOICE_TEXT
            self._choice = text_
        if nested_array_ is not None:
            if self._choice_tag != self.UNDEFINED_CHOICE:
                raise zserio.PythonRuntimeException("Calling constructor of union WalkerUnion is ambiguous!")
            self._choice_tag = self.CHOICE_NESTED_ARRAY
            self._choice = zserio.array.Array(
                zserio.array.ObjectArrayTraits(self._ZserioElementFactory_nested_array()),
                nested_array_,
                is_auto=True,
            )

    @classmethod
    def from_reader(cls: typing.Type["WalkerUnion"], zserio_reader: zserio.BitStreamReader) -> "WalkerUnion":
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    @staticmethod
    def type_info() -> zserio.typeinfo.TypeInfo:
        field_list: typing.List[zserio.typeinfo.MemberInfo] = [
            zserio.typeinfo.MemberInfo(
                "value",
                zserio.typeinfo.TypeInfo("uint32", int),
                attributes={zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "value"},
            ),
            zserio.typeinfo.MemberInfo(
                "text",
                zserio.typeinfo.TypeInfo("string", str),
                attributes={zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "text"},
            ),
            zserio.typeinfo.MemberInfo(
                "nestedArray",
                test_object.walker_nested.WalkerNested.type_info(),
                attributes={
                    zserio.typeinfo.MemberAttribute.PROPERTY_NAME: "nested_array",
                    zserio.typeinfo.MemberAttribute.ARRAY_LENGTH: None,
                },
            ),
        ]
        attribute_list = {
            zserio.typeinfo.TypeAttribute.FIELDS: field_list,
            zserio.typeinfo.TypeAttribute.SELECTOR: None,
        }

        return zserio.typeinfo.TypeInfo("test_object.WalkerUnion", WalkerUnion, attributes=attribute_list)

    def __eq__(self, other: object) -> bool:
        if isinstance(other, WalkerUnion):
            return self._choice_tag == other._choice_tag and self._choice == other._choice

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._choice_tag)
        if self._choice_tag == self.CHOICE_VALUE:
            result = zserio.hashcode.calc_hashcode_int32(result, self._choice)
        elif self._choice_tag == self.CHOICE_TEXT:
            result = zserio.hashcode.calc_hashcode_string(result, self._choice)
        elif self._choice_tag == self.CHOICE_NESTED_ARRAY:
            result = zserio.hashcode.calc_hashcode_object(result, self._choice)
        else:
            pass

        return result

    @property
    def value(self) -> int:
        return self._choice

    @value.setter
    def value(self, value_: int) -> None:
        self._choice_tag = self.CHOICE_VALUE
        self._choice = value_

    @property
    def text(self) -> str:
        return self._choice

    @text.setter
    def text(self, text_: str) -> None:
        self._choice_tag = self.CHOICE_TEXT
        self._choice = text_

    @property
    def nested_array(self) -> typing.List[test_object.walker_nested.WalkerNested]:
        return self._choice.raw_array

    @nested_array.setter
    def nested_array(self, nested_array_: typing.List[test_object.walker_nested.WalkerNested]) -> None:
        self._choice_tag = self.CHOICE_NESTED_ARRAY
        self._choice = zserio.array.Array(
            zserio.array.ObjectArrayTraits(self._ZserioElementFactory_nested_array()),
            nested_array_,
            is_auto=True,
        )

    @property
    def choice_tag(self) -> int:
        return self._choice_tag

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._choice_tag)

        if self._choice_tag == self.CHOICE_VALUE:
            end_bitposition += 32
        elif self._choice_tag == self.CHOICE_TEXT:
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif self._choice_tag == self.CHOICE_NESTED_ARRAY:
            end_bitposition += self._choice.bitsizeof(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in union WalkerUnion!")

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition

        end_bitposition += zserio.bitsizeof.bitsizeof_varsize(self._choice_tag)

        if self._choice_tag == self.CHOICE_VALUE:
            end_bitposition += 32
        elif self._choice_tag == self.CHOICE_TEXT:
            end_bitposition += zserio.bitsizeof.bitsizeof_string(self._choice)
        elif self._choice_tag == self.CHOICE_NESTED_ARRAY:
            end_bitposition = self._choice.initialize_offsets(end_bitposition)
        else:
            raise zserio.PythonRuntimeException("No match in union WalkerUnion!")

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._choice_tag = zserio_reader.read_varsize()

        if self._choice_tag == self.CHOICE_VALUE:
            self._choice = zserio_reader.read_bits(32)
        elif self._choice_tag == self.CHOICE_TEXT:
            self._choice = zserio_reader.read_string()
        elif self._choice_tag == self.CHOICE_NESTED_ARRAY:
            self._choice = zserio.array.Array.from_reader(
                zserio.array.ObjectArrayTraits(self._ZserioElementFactory_nested_array()),
                zserio_reader,
                is_auto=True,
            )
        else:
            raise zserio.PythonRuntimeException("No match in union WalkerUnion!")

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_varsize(self._choice_tag)

        if self._choice_tag == self.CHOICE_VALUE:
            zserio_writer.write_bits(self._choice, 32)
        elif self._choice_tag == self.CHOICE_TEXT:
            zserio_writer.write_string(self._choice)
        elif self._choice_tag == self.CHOICE_NESTED_ARRAY:
            self._choice.write(zserio_writer)
        else:
            raise zserio.PythonRuntimeException("No match in union WalkerUnion!")

    class _ZserioElementFactory_nested_array:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(
            zserio_reader: zserio.BitStreamReader, zserio_index: int
        ) -> test_object.walker_nested.WalkerNested:
            del zserio_index
            return test_object.walker_nested.WalkerNested.from_reader(zserio_reader)

    CHOICE_VALUE = 0
    CHOICE_TEXT = 1
    CHOICE_NESTED_ARRAY = 2
    UNDEFINED_CHOICE = -1
