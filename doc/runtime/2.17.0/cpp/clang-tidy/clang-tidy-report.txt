/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamReader.cpp:301:29: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        value = ctx.cache & MASK_TABLE[ctx.cacheNumBits];
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamReader.cpp:315:81: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    value |= ((ctx.cache >> static_cast<uint8_t>(ctx.cacheNumBits - numBits)) & MASK_TABLE[numBits]);
                                                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:357:66: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    if (numBits == 0 || numBits > sizeof(uint32_t) * 8 || data > MAX_U32_VALUES[numBits])
                                                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:368:66: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    if (numBits == 0 || numBits > sizeof(uint64_t) * 8 || data > MAX_U64_VALUES[numBits])
                                                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:379:65: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    if (numBits == 0 || numBits > sizeof(int32_t) * 8 || data < MIN_I32_VALUES[numBits] ||
                                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:380:20: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            data > MAX_I32_VALUES[numBits])
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:386:53: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    writeUnsignedBits(static_cast<uint32_t>(data) & MAX_U32_VALUES[numBits], numBits);
                                                    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:391:65: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    if (numBits == 0 || numBits > sizeof(int64_t) * 8 || data < MIN_I64_VALUES[numBits] ||
                                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:392:20: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
            data > MAX_I64_VALUES[numBits])
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:398:55: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    writeUnsignedBits64(static_cast<uint64_t>(data) & MAX_U64_VALUES[numBits], numBits);
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:594:31: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        const uint32_t mask = MAX_U32_VALUES[restNumBits];
                              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.cpp:662:73: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        const uint8_t add = static_cast<uint8_t>((value >> shiftBits) & bitMasks[numBits - 1U]);
                                                                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/FileUtil.cpp:19:23: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    if (!stream.write(reinterpret_cast<const char*>(buffer), static_cast<std::streamsize>(byteSize)))
                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/FileUtil.cpp:49:22: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    if (!stream.read(reinterpret_cast<char*>(bitBuffer.getBuffer()),
                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/JsonEncoder.cpp:98:34: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                (void)stream.put(HEX[(characterInt >> 4U) & 0xFU]);
                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/JsonEncoder.cpp:99:34: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                (void)stream.put(HEX[characterInt & 0xFU]);
                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/pmr/MemoryResource.cpp:17:28: warning: variable 'defaultResource' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
    static MemoryResource* defaultResource = getNewDeleteResource();
                           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:370:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:730:69: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(NoInit, &m_untypedHolder.inPlace);
                                                                    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:734:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:739:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:739:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:740:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:745:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(NoInit, get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:751:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/TrackingAllocator.h:78:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:370:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:667:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->clone(&m_untypedHolder.inPlace);
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:670:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:672:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = other.getUntypedHolder()->clone(get_allocator_ref());
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:676:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:684:70: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->clone(NoInit, &m_untypedHolder.inPlace);
                                                                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:687:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:689:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = other.getUntypedHolder()->clone(NoInit, get_allocator_ref());
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:693:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:730:69: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(NoInit, &m_untypedHolder.inPlace);
                                                                    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:734:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:739:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:739:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:740:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:745:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(NoInit, get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:751:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:47:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(MemoryResource* resource = getDefaultResource()) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:72:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(const PolymorphicAllocatorBase<U>& other) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/TrackingAllocator.h:78:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/BitBufferTest.cpp:366:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        readBuffer++;
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/BitBufferTest.cpp:380:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        readBuffer++;
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/TrackingAllocator.h:78:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/BuiltInOperatorsTest.cpp:25:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr DummyBitmask(Values value) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeVersion.h:8:9: warning: macro 'CPP_EXTENSION_RUNTIME_VERSION_NUMBER' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define CPP_EXTENSION_RUNTIME_VERSION_NUMBER 1002002
        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/DeltaContext.h:95:55: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
            m_previousElement = static_cast<uint64_t>(element);
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/DeltaContext.h:113:59: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                m_previousElement = static_cast<uint64_t>(element);
                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/DeltaContext.h:176:59: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                m_previousElement = static_cast<uint64_t>(element);
                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/DeltaContext.h:212:59: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
                m_previousElement = static_cast<uint64_t>(element);
                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/DeltaContext.h:342:51: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
        m_previousElement = static_cast<uint64_t>(element);
                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/DeltaContext.h:369:51: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse]
        m_previousElement = static_cast<uint64_t>(element);
                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Enums.h:93:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return EnumTraits<T>::values[ordinal];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Enums.h:106:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return EnumTraits<T>::names[enumToOrdinal(value)];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:667:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->clone(&m_untypedHolder.inPlace);
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:670:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:672:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = other.getUntypedHolder()->clone(get_allocator_ref());
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:676:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:158:10: warning: function 'parseElement' is within a recursive call chain [misc-no-recursion]
    void parseElement();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:158:10: note: example recursive call chain, starting from function 'parseElement'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:189:9: note: Frame #1: function 'parseElement' calls function 'parseArray' here:
        parseArray();
        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:257:9: note: Frame #2: function 'parseArray' calls function 'parseElements' here:
        parseElements();
        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:267:5: note: Frame #3: function 'parseElements' calls function 'parseElement' here:
    parseElement();
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:267:5: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:159:10: warning: function 'parseObject' is within a recursive call chain [misc-no-recursion]
    void parseObject();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:160:10: warning: function 'parseMembers' is within a recursive call chain [misc-no-recursion]
    void parseMembers();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:161:10: warning: function 'parseMember' is within a recursive call chain [misc-no-recursion]
    void parseMember();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:162:10: warning: function 'parseArray' is within a recursive call chain [misc-no-recursion]
    void parseArray();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:163:10: warning: function 'parseElements' is within a recursive call chain [misc-no-recursion]
    void parseElements();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            m_storage(arr, N)
                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:73:10: warning: function 'walkFields' is within a recursive call chain [misc-no-recursion]
    void walkFields(const IBasicReflectableConstPtr<ALLOC>& compound, const IBasicTypeInfo<ALLOC>& typeInfo);
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:75:10: note: example recursive call chain, starting from function 'walkFieldValue'
    bool walkFieldValue(const IBasicReflectableConstPtr<ALLOC>& reflectable,
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:546:13: note: Frame #1: function 'walkFieldValue' calls function 'walkFields' here:
            walkFields(reflectable, typeInfo);
            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:493:17: note: Frame #2: function 'walkFields' calls function 'walkField' here:
                walkField(compound->getField(compoundChoice), *fieldsIt);
                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:521:22: note: Frame #3: function 'walkField' calls function 'walkFieldValue' here:
                if (!walkFieldValue(reflectable->at(i), fieldInfo, i))
                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:521:22: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:74:10: warning: function 'walkField' is within a recursive call chain [misc-no-recursion]
    bool walkField(const IBasicReflectableConstPtr<ALLOC>& reflectable, const BasicFieldInfo<ALLOC>& fieldInfo);
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:75:10: warning: function 'walkFieldValue' is within a recursive call chain [misc-no-recursion]
    bool walkFieldValue(const IBasicReflectableConstPtr<ALLOC>& reflectable,
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<bool, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<double, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<std::nullptr_t, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<unsigned long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyBitmaskValue(
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<bool, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<double, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<std::nullptr_t, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<unsigned long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<bool &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<bool &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<bool &, zserio::pmr::PropagatingPolymorphicAllocator<>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<bool &, zserio::pmr::PropagatingPolymorphicAllocator<>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<bool &, zserio::pmr::PropagatingPolymorphicAllocator<>>' calls function 'makeAnyEnumValue<bool, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<bool, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' calls function 'makeAnyValue<bool &, zserio::pmr::PropagatingPolymorphicAllocator<>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<double &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<double &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<double &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<double &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<double &, zserio::pmr::PropagatingPolymorphicAllocator<>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<double &, zserio::pmr::PropagatingPolymorphicAllocator<>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<double &, zserio::pmr::PropagatingPolymorphicAllocator<>>' calls function 'makeAnyEnumValue<double, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<double, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' calls function 'makeAnyValue<double &, zserio::pmr::PropagatingPolymorphicAllocator<>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<long &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<long &, zserio::pmr::PropagatingPolymorphicAllocator<>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<long &, zserio::pmr::PropagatingPolymorphicAllocator<>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<long &, zserio::pmr::PropagatingPolymorphicAllocator<>>' calls function 'makeAnyEnumValue<long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' calls function 'makeAnyValue<long &, zserio::pmr::PropagatingPolymorphicAllocator<>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<std::nullptr_t &, zserio::pmr::PropagatingPolymorphicAllocator<>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<std::nullptr_t &, zserio::pmr::PropagatingPolymorphicAllocator<>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<std::nullptr_t &, zserio::pmr::PropagatingPolymorphicAllocator<>>' calls function 'makeAnyEnumValue<std::nullptr_t, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<std::nullptr_t, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' calls function 'makeAnyValue<std::nullptr_t &, zserio::pmr::PropagatingPolymorphicAllocator<>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<unsigned long &, zserio::pmr::PropagatingPolymorphicAllocator<>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, zserio::pmr::PropagatingPolymorphicAllocator<>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<unsigned long &, zserio::pmr::PropagatingPolymorphicAllocator<>>' calls function 'makeAnyEnumValue<unsigned long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, zserio::pmr::PropagatingPolymorphicAllocator<>, 0>' calls function 'makeAnyValue<unsigned long &, zserio::pmr::PropagatingPolymorphicAllocator<>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:47:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(MemoryResource* resource = getDefaultResource()) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:72:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(const PolymorphicAllocatorBase<U>& other) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HashCodeUtilTest.cpp:33:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Permissions(Values value) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:47:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(MemoryResource* resource = getDefaultResource()) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:72:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(const PolymorphicAllocatorBase<U>& other) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:216:18: warning: 'optional' used after it was moved [bugprone-use-after-move]
    ASSERT_FALSE(optional.hasValue());
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:212:53: note: move occurred here
    HeapOptionalHolder<int, TrackingAllocator<int>> optionalMoved(std::move(optional));
                                                    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:257:18: warning: 'emptyOptional' used after it was moved [bugprone-use-after-move]
    ASSERT_FALSE(emptyOptional.hasValue());
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:256:53: note: move occurred here
    HeapOptionalHolder<int, TrackingAllocator<int>> emptyMoved(std::move(emptyOptional), alloc2);
                                                    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:359:15: warning: 'optionalVector' used after it was moved [bugprone-use-after-move]
    ASSERT_EQ(optionalVector.get_allocator(), optionalVectorMoved.get_allocator());
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:356:25: note: move occurred here
    optionalVectorMoved = std::move(optionalVector);
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:368:17: warning: 'optionalNp' used after it was moved [bugprone-use-after-move]
    ASSERT_TRUE(optionalNp.hasValue());
                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:367:21: note: move occurred here
    optionalNpMoved = std::move(optionalNp);
                    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:396:54: warning: 'optionalObject' used after it was moved [bugprone-use-after-move]
        optionalObjectMoved.assign(NoInit, std::move(optionalObject));
                                                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:393:24: note: move occurred here
        optionalObject.assign(NoInit, std::move(optionalObject));
                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:411:54: warning: 'optionalObject' used after it was moved [bugprone-use-after-move]
        optionalObjectMoved.assign(NoInit, std::move(optionalObject));
                                                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/HeapOptionalHolderTest.cpp:408:24: note: move occurred here
        optionalObject.assign(NoInit, std::move(optionalObject));
                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/TrackingAllocator.h:78:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/InplaceOptionalHolderTest.cpp:276:50: warning: 'optionalObject' used after it was moved [bugprone-use-after-move]
    optionalObjectMoved.assign(NoInit, std::move(optionalObject));
                                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/InplaceOptionalHolderTest.cpp:273:20: note: move occurred here
    optionalObject.assign(NoInit, std::move(optionalObject));
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:158:10: warning: function 'parseElement' is within a recursive call chain [misc-no-recursion]
    void parseElement();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:158:10: note: example recursive call chain, starting from function 'parseElement'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:189:9: note: Frame #1: function 'parseElement' calls function 'parseArray' here:
        parseArray();
        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:257:9: note: Frame #2: function 'parseArray' calls function 'parseElements' here:
        parseElements();
        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:267:5: note: Frame #3: function 'parseElements' calls function 'parseElement' here:
    parseElement();
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:267:5: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:159:10: warning: function 'parseObject' is within a recursive call chain [misc-no-recursion]
    void parseObject();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:160:10: warning: function 'parseMembers' is within a recursive call chain [misc-no-recursion]
    void parseMembers();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:161:10: warning: function 'parseMember' is within a recursive call chain [misc-no-recursion]
    void parseMember();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:162:10: warning: function 'parseArray' is within a recursive call chain [misc-no-recursion]
    void parseArray();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:163:10: warning: function 'parseElements' is within a recursive call chain [misc-no-recursion]
    void parseElements();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            m_storage(arr, N)
                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:667:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->clone(&m_untypedHolder.inPlace);
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:670:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:672:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = other.getUntypedHolder()->clone(get_allocator_ref());
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:676:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:158:10: warning: function 'parseElement' is within a recursive call chain [misc-no-recursion]
    void parseElement();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:158:10: note: example recursive call chain, starting from function 'parseElement'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:189:9: note: Frame #1: function 'parseElement' calls function 'parseArray' here:
        parseArray();
        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:257:9: note: Frame #2: function 'parseArray' calls function 'parseElements' here:
        parseElements();
        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:267:5: note: Frame #3: function 'parseElements' calls function 'parseElement' here:
    parseElement();
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:267:5: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:159:10: warning: function 'parseObject' is within a recursive call chain [misc-no-recursion]
    void parseObject();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:160:10: warning: function 'parseMembers' is within a recursive call chain [misc-no-recursion]
    void parseMembers();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:161:10: warning: function 'parseMember' is within a recursive call chain [misc-no-recursion]
    void parseMember();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:162:10: warning: function 'parseArray' is within a recursive call chain [misc-no-recursion]
    void parseArray();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/JsonParser.h:163:10: warning: function 'parseElements' is within a recursive call chain [misc-no-recursion]
    void parseElements();
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            m_storage(arr, N)
                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyBitmaskValue(
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<std::nullptr_t, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<bool &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<bool &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<double &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<double &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<double &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<double &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<long &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<std::nullptr_t, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<std::nullptr_t &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: warning: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:355:18: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectableConstPtr<ALLOC> getFromObject(
                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectablePtr<ALLOC> getFromObject(IBasicReflectable<ALLOC>& object, StringView path, size_t pos)
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:2025:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
class ReflectableAllocatorHolderBase : public ReflectableBase<ALLOC>, public AllocatorHolder<ALLOC>
^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:47:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(MemoryResource* resource = getDefaultResource()) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:72:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(const PolymorphicAllocatorBase<U>& other) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/PolymorphicAllocatorTest.cpp:58:49: warning: std::move of the variable 'allocator2' of the trivially-copyable type 'pmr::PolymorphicAllocator<>' has no effect; remove std::move() [performance-move-const-arg]
    pmr::PolymorphicAllocator<> allocator2Moved(std::move(allocator2));
                                                ^~~~~~~~~~          ~
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/PolymorphicAllocatorTest.cpp:78:60: warning: std::move of the variable 'allocator2' of the trivially-copyable type 'pmr::PropagatingPolymorphicAllocator<>' has no effect; remove std::move() [performance-move-const-arg]
    pmr::PropagatingPolymorphicAllocator<> allocator2Moved(std::move(allocator2));
                                                           ^~~~~~~~~~          ~
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:47:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(MemoryResource* resource = getDefaultResource()) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:72:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(const PolymorphicAllocatorBase<U>& other) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:667:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->clone(&m_untypedHolder.inPlace);
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:670:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:672:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = other.getUntypedHolder()->clone(get_allocator_ref());
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:676:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectableConstPtr<ALLOC> getFromObject(
                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectablePtr<ALLOC> getFromObject(IBasicReflectable<ALLOC>& object, StringView path, size_t pos)
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:2025:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
class ReflectableAllocatorHolderBase : public ReflectableBase<ALLOC>, public AllocatorHolder<ALLOC>
^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ReflectableUtil.h:131:17: warning: function 'arraysEqual<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
    static bool arraysEqual(
                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ReflectableUtil.h:135:17: warning: function 'compoundsEqual<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
    static bool compoundsEqual(const IBasicReflectableConstPtr<ALLOC>& lhsCompound,
                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ReflectableUtil.h:146:23: warning: function 'equal<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
bool ReflectableUtil::equal(
                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ReflectableUtil.h:146:23: note: example recursive call chain, starting from function 'equal<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ReflectableUtil.h:169:16: note: Frame #1: function 'equal<std::allocator<unsigned char>>' calls function 'arraysEqual<std::allocator<unsigned char>>' here:
        return arraysEqual<ALLOC>(lhs, rhs);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ReflectableUtil.h:192:14: note: Frame #2: function 'arraysEqual<std::allocator<unsigned char>>' calls function 'equal<std::allocator<unsigned char>>' here:
        if (!equal<ALLOC>(lhsArray->at(i), rhsArray->at(i)))
             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ReflectableUtil.h:192:14: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:113:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
            m_storage(arr, N)
                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/SpanTest.cpp:34:43: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Span<int> span(vec.data(), vec.data() + vec.size());
                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/SpanTest.cpp:38:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Span<int, 4> spanStatic(vec.data(), vec.data() + vec.size());
                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/SpanTest.cpp:45:5: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    int arr[] = {0, 13, 42};
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/SqliteConnectionTest.cpp:320:36: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    const std::string resultString(reinterpret_cast<const char*>(sqlite3_column_text(statement, 0)));
                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/StringViewTest.cpp:81:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ASSERT_EQ(str[i], view[i]);
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/StringViewTest.cpp:92:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ASSERT_EQ(str[i], view.at(i));
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/StringViewTest.cpp:156:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ASSERT_EQ(str + 2, view.data());
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/StringViewTest.cpp:209:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ASSERT_EQ(str + 2, subView.data());
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/StringViewTest.cpp:769:5: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    char textWithoutTermZero[] = {'t', 'e', 'x', 't'};
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:47:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(MemoryResource* resource = getDefaultResource()) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/pmr/PolymorphicAllocator.h:72:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    PolymorphicAllocatorBase(const PolymorphicAllocatorBase<U>& other) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/TypeInfo.h:1443:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return bitFieldTypeInfoArray[bitSize - 1U];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/TypeInfo.h:1521:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return bitFieldTypeInfoArray[static_cast<size_t>(bitSize - 1)];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:827:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:90: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Enums.h:106:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return EnumTraits<T>::names[enumToOrdinal(value)];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectableConstPtr<ALLOC> getFromObject(
                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectablePtr<ALLOC> getFromObject(IBasicReflectable<ALLOC>& object, StringView path, size_t pos)
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:2025:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
class ReflectableAllocatorHolderBase : public ReflectableBase<ALLOC>, public AllocatorHolder<ALLOC>
^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/TypeInfo.h:1443:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return bitFieldTypeInfoArray[bitSize - 1U];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/TypeInfo.h:1521:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return bitFieldTypeInfoArray[static_cast<size_t>(bitSize - 1)];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/ReflectableTest.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace std::placeholders;
^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/zserio/TrackingAllocator.h:78:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    TrackingAllocatorImpl(const TrackingAllocatorImpl<Other>& other) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ValidationSqliteUtil.h:99:38: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
            const char* columnName = reinterpret_cast<const char*>(sqlite3_column_text(statement.get(), 1));
                                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ValidationSqliteUtil.h:100:38: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
            const char* columnType = reinterpret_cast<const char*>(sqlite3_column_text(statement.get(), 2));
                                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:61:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        m_typedHolder = std::forward<U>(value);
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:340:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:355:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = nullptr;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:790:74: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                detail::NonHeapHolder<T, ALLOC>::create(&m_untypedHolder.inPlace);
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:799:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        m_untypedHolder.heap = holder;
                        ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:821:75: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return static_cast<detail::HeapHolder<T, ALLOC>*>(m_untypedHolder.heap);
                                                                          ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:84: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:877:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Enums.h:106:12: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
    return EnumTraits<T>::names[enumToOrdinal(value)];
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:694:5: warning: constructor does not initialize these fields: m_storage [cppcoreguidelines-pro-type-member-init]
    constexpr inplace_optional_holder() noexcept = default;
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<double &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<float &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<int &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<long long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: warning: function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<bool &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<bool &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<bool, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<bool &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<double &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<double &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<double, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<double &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<float, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<float &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<float &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<float, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<float, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<float &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<int, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<int &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<int &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<int, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<int, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<int &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<long long &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<long long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<long long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<long &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<std::vector<unsigned char> &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<test_object::std_allocator::CreatorBitmask, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<test_object::std_allocator::CreatorBitmask, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<test_object::std_allocator::CreatorBitmask, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<test_object::std_allocator::CreatorBitmask &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<unsigned long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<unsigned long, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<unsigned long &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:219:18: warning: function 'makeAnyEnumValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyEnumValue(T enumRawValue, const IBasicTypeInfo<ALLOC>& typeInfo, const ALLOC& allocator)
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:16: note: Frame #1: function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>' calls function 'makeAnyEnumValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' here:
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: Frame #2: function 'makeAnyEnumValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<zserio::BasicBitBuffer<> &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), enumRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:221:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<bool, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyBitmaskValue(
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<double, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<float, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<int, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<std::vector<unsigned char>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorEnum, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:386:16: note: Frame #1: function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>' calls function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorEnum, std::allocator<unsigned char>, 0>' here:
        return makeAnyBitmaskValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:351:12: note: Frame #2: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorEnum, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<test_object::std_allocator::CreatorEnum &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), bitmaskRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:351:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorUnsignedEnum, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyBitmaskValue(
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:26:18: note: example recursive call chain, starting from function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>'
AnyHolder<ALLOC> makeAnyValue(const IBasicTypeInfo<ALLOC>& typeInfo, T&& value, const ALLOC& allocator);
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:386:16: note: Frame #1: function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>' calls function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorUnsignedEnum, std::allocator<unsigned char>, 0>' here:
        return makeAnyBitmaskValue(std::forward<T>(value), typeInfo, allocator);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:351:12: note: Frame #2: function 'makeAnyBitmaskValue<test_object::std_allocator::CreatorUnsignedEnum, std::allocator<unsigned char>, 0>' calls function 'makeAnyValue<test_object::std_allocator::CreatorUnsignedEnum &, std::allocator<unsigned char>>' here:
    return makeAnyValue(typeInfo.getUnderlyingType(), bitmaskRawValue, allocator);
           ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:351:12: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<unsigned long long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
AnyHolder<ALLOC> makeAnyBitmaskValue(
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<unsigned long, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:348:18: warning: function 'makeAnyBitmaskValue<zserio::BasicBitBuffer<>, std::allocator<unsigned char>, 0>' is within a recursive call chain [misc-no-recursion]
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:382:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        return makeAnyStringValue(std::forward<T>(value), allocator);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:384:33: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        return makeAnyEnumValue(std::forward<T>(value), typeInfo, allocator);
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/ZserioTreeCreator.h:386:36: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        return makeAnyBitmaskValue(std::forward<T>(value), typeInfo, allocator);
                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:701:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            other.getUntypedHolder()->move(&m_untypedHolder.inPlace);
                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:705:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        else if (other.m_untypedHolder.heap != nullptr)
                                       ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:710:62: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.m_untypedHolder.heap;
                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:711:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                other.m_untypedHolder.heap = nullptr;
                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:716:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                m_untypedHolder.heap = other.getUntypedHolder()->move(get_allocator_ref());
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:722:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:761:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
            m_untypedHolder.heap = nullptr;
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:767:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        return (m_isInPlace || m_untypedHolder.heap != nullptr);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:833:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:839:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const detail::NonHeapHolder<T, ALLOC>*>(&m_untypedHolder.inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:869:78: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                ? reinterpret_cast<detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                                                                             ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:870:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                : m_untypedHolder.heap;
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/AnyHolder.h:876:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                ? reinterpret_cast<const detail::IHolder<ALLOC>*>(&m_untypedHolder.inPlace)
                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitBuffer.h:275:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_buffer(buffer, buffer + (bitSize + 7) / 8, allocator),
                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/BitStreamWriter.h:71:5: warning: constructor does not initialize these fields: m_bitIndex, m_bufferBitSize [cppcoreguidelines-pro-type-member-init]
    explicit BitStreamWriter(BasicBitBuffer<ALLOC>& bitBuffer) :
    ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/CppRuntimeException.h:199:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    exception << value;
                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:232:15: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr heap_optional_holder(NullOptType, const allocator_type& allocator = allocator_type()) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:242:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(const T& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:252:5: warning: constructors that are callable with a single argument must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    heap_optional_holder(T&& val, const allocator_type& allocator = allocator_type()) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:658:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:668:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        return reinterpret_cast<const T*>(&m_inPlace);
               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:699:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr inplace_optional_holder(NullOptType) noexcept
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:707:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(const T& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/OptionalHolder.h:718:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    inplace_optional_holder(T&& val)
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectableConstPtr<ALLOC> getFromObject(
                                 ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1953:34: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1965:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: warning: function 'getFromObject<std::allocator<unsigned char>>' is within a recursive call chain [misc-no-recursion]
IBasicReflectablePtr<ALLOC> getFromObject(IBasicReflectable<ALLOC>& object, StringView path, size_t pos)
                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1987:29: note: example recursive call chain, starting from function 'getFromObject<std::allocator<unsigned char>>'
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: Frame #1: function 'getFromObject<std::allocator<unsigned char>>' calls function 'getFromObject<std::allocator<unsigned char>>' here:
            return isLast ? std::move(field) : getFromObject(*field, path, dotPos + 1);
                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:1998:48: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Reflectable.h:2025:1: warning: inheriting multiple classes that aren't pure virtual is discouraged [fuchsia-multiple-inheritance]
class ReflectableAllocatorHolderBase : public ReflectableBase<ALLOC>, public AllocatorHolder<ALLOC>
^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:80:15: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
    constexpr Span() noexcept
              ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(element_type (&arr)[N]) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:112:20: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
    constexpr Span(element_type (&arr)[N]) noexcept :
                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:123:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:125:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:136:64: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<const U (*)[], T (*)[]>::value,
                                                               ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:138:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::array<U, N>& arr) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:84: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                   ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:148:93: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
            typename std::enable_if<(ext == dynamic_extent) && std::is_convertible<U (*)[], T (*)[]>::value,
                                                                                            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:150:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:74: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:161:83: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                    (ext == dynamic_extent) && std::is_convertible<const U (*)[], T (*)[]>::value, int>::type =
                                                                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:163:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const std::vector<U, ALLOC>& vec) :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:49: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:174:58: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
                            std::is_convertible<U (*)[], T (*)[]>::value,
                                                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Span.h:176:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr Span(const Span<U, N>& span) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:43:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:44:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:49:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_1[static_cast<unsigned int>(value)];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:54:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index + 1];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringConvertUtil.h:55:26: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
        *(--bufferEnd) = DIGITS_100_10[index];
                         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:54:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    BasicStringView(const const_pointer str) noexcept :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:76:15: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    constexpr BasicStringView(const std::basic_string<CharT, Traits, ALLOC>& str) noexcept :
              ^
              explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:929:55: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]
constexpr BasicStringView<CharT> makeStringView(const CharT (&str)[N])
                                                      ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/StringView.h:932:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return BasicStringView<CharT>(str, str[N - 1] == CharT() ? (N - 1) : N);
                                  ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:57:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const ALLOC_U& allocator) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/UniquePtr.h:68:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
    UniquePtrDeleter(const UniquePtrDeleter<ALLOC_U>& deleter) :
    ^
    explicit 
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:73:10: warning: function 'walkFields' is within a recursive call chain [misc-no-recursion]
    void walkFields(const IBasicReflectableConstPtr<ALLOC>& compound, const IBasicTypeInfo<ALLOC>& typeInfo);
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:75:10: note: example recursive call chain, starting from function 'walkFieldValue'
    bool walkFieldValue(const IBasicReflectableConstPtr<ALLOC>& reflectable,
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:546:13: note: Frame #1: function 'walkFieldValue' calls function 'walkFields' here:
            walkFields(reflectable, typeInfo);
            ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:493:17: note: Frame #2: function 'walkFields' calls function 'walkField' here:
                walkField(compound->getField(compoundChoice), *fieldsIt);
                ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:521:22: note: Frame #3: function 'walkField' calls function 'walkFieldValue' here:
                if (!walkFieldValue(reflectable->at(i), fieldInfo, i))
                     ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:521:22: note: ... which was the starting point of the recursive call chain; there may be other cycles
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:74:10: warning: function 'walkField' is within a recursive call chain [misc-no-recursion]
    bool walkField(const IBasicReflectableConstPtr<ALLOC>& reflectable, const BasicFieldInfo<ALLOC>& fieldInfo);
         ^
/home/runner/work/zserio/zserio/compiler/extensions/cpp/runtime/test/../src/zserio/Walker.h:75:10: warning: function 'walkFieldValue' is within a recursive call chain [misc-no-recursion]
    bool walkFieldValue(const IBasicReflectableConstPtr<ALLOC>& reflectable,
         ^
